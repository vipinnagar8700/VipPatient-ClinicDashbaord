{"version":3,"file":"static/js/126.bd59c454.chunk.js","mappings":"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","sources":["components/PeriodNav/index.jsx","components/Widget/WidgetNav/index.jsx","hooks/usePeriodNav.js","widgets/DoctorRatingList/index.jsx","pages/DashboardG.jsx","widgets/HealthIndexChart/style.js","db/health.js","widgets/HealthIndexChart/index.jsx"],"sourcesContent":["// styled components\nimport {Container, Item, Button} from '@ui/TabNav/style';\n\n// hooks\nimport usePeriodNav from '@hooks/usePeriodNav';\n\n// utils\nimport {nanoid} from 'nanoid';\n\nconst PeriodNav = ({current, handler}) => {\n    const {periods} = usePeriodNav();\n\n    return (\n        <Container>\n            {\n                periods.map(p =>\n                    <Item key={nanoid(4)}>\n                        <Button className={current === p && 'active'} onClick={() => handler(p)}>{p}</Button>\n                    </Item>\n                )\n            }\n        </Container>\n    )\n}\n\nexport default PeriodNav;","// styled components\nimport {Nav} from '../style';\n\n// components\nimport WidgetHeader from '../WidgetHeader';\n\n// utils\nimport PropTypes from \"prop-types\";\n\nconst WidgetNav = ({title, handler, sidePadding, children, disabled, ...props}) => {\n    return (\n        <WidgetHeader title={title} sidePadding={sidePadding} style={props.style} className=\"nav\">\n            <Nav>\n                <button onClick={handler} data-direction=\"prev\" className={disabled ? 'disabled' : ''} aria-label=\"Previous\">\n                    <i className=\"icon icon-chevron-left\"/>\n                </button>\n                <button onClick={handler} data-direction=\"next\" className={disabled ? 'disabled' : ''} aria-label=\"Next\">\n                    <i className=\"icon icon-chevron-right\"/>\n                </button>\n            </Nav>\n            {children}\n        </WidgetHeader>\n    )\n}\n\nWidgetNav.propTypes = {\n    title: PropTypes.string.isRequired,\n    handler: PropTypes.func.isRequired,\n    disabled: PropTypes.bool,\n}\n\nexport default WidgetNav;","import {useState} from 'react';\n\nconst usePeriodNav = () => {\n    const periods = ['year', 'month', 'week'];\n    const [period, setPeriod] = useState(periods[0]);\n    const setPeriodIndex = (index) => setPeriod(periods[index]);\n\n    return {period, periods, setPeriod, setPeriodIndex};\n}\n\nexport default usePeriodNav;","// components\nimport Widget from '@components/Widget';\nimport WidgetHeader from '@components/Widget/WidgetHeader';\nimport WidgetBody from '@components/Widget/WidgetBody';\nimport ScrollContainer from '@components/ScrollContainer';\nimport PeriodNav from '@components/PeriodNav';\nimport Tab from 'react-bootstrap/Tab';\nimport DoctorRatingItem from '@components/DoctorRatingItem';\n\n// hooks\nimport useContentHeight from '@hooks/useContentHeight';\nimport {useRef, useState, useEffect} from 'react';\nimport usePeriodNav from '@hooks/usePeriodNav';\n\n// data placeholder\nimport {doctors} from '@db/doctors';\n\nconst DoctorsRatingList = () => {\n    const [current, setCurrent] = useState(usePeriodNav().period);\n    const headerRef = useRef(null);\n    const contentRef = useRef(null);\n    const height = useContentHeight(headerRef);\n\n    useEffect(() => {\n        contentRef.current.scrollTop = 0;\n    }, [current]);\n\n    const List = ({period}) => {\n        return (\n            <>\n                {\n                    doctors.map(doctor => <DoctorRatingItem key={doctor.id} data={doctor} period={period}/>)\n                }\n            </>\n        )\n    }\n\n    return (\n        <Widget name=\"DoctorsRatingList\" mobile={600}>\n            <WidgetHeader title=\"Doctors rating\" flex=\"column\" style={{paddingBottom: 4}} elRef={headerRef}>\n                <PeriodNav current={current} handler={setCurrent} />\n            </WidgetHeader>\n            <WidgetBody style={{padding: 0}}>\n                <ScrollContainer height={height}>\n                    <div className=\"track\" ref={contentRef}>\n                        <Tab.Container activeKey={current} transition={true}>\n                            <Tab.Content>\n                                <Tab.Pane eventKey=\"year\">\n                                    <List period=\"year\"/>\n                                </Tab.Pane>\n                                <Tab.Pane eventKey=\"month\">\n                                    <List period=\"month\"/>\n                                </Tab.Pane>\n                                <Tab.Pane eventKey=\"week\">\n                                    <List period=\"week\"/>\n                                </Tab.Pane>\n                            </Tab.Content>\n                        </Tab.Container>\n                    </div>\n                </ScrollContainer>\n            </WidgetBody>\n        </Widget>\n    )\n}\n\nexport default DoctorsRatingList;","// components\nimport Page from '@layout/Page';\nimport DoctorsRatingList from '@widgets/DoctorRatingList';\nimport HealthIndexChart from '@widgets/HealthIndexChart';\nimport DoctorCureRate from '@widgets/DoctorCureRate';\n\nconst DashboardG = () => {\n    return (\n        <Page title=\"Dashboard\">\n            <div key=\"doctors-rating\">\n                <DoctorsRatingList type=\"tabs\"/>\n            </div>\n            <div key=\"health-index\">\n                <HealthIndexChart variant=\"both\"/>\n            </div>\n            <div key=\"cure-rate\">\n                <DoctorCureRate/>\n            </div>\n        </Page>\n    )\n}\n\nexport default DashboardG;","import styled from 'styled-components/macro';\nimport theme from 'styled-theming';\nimport {colors, textSizes, breakpoints, flex} from '@styles/vars';\n\nexport const HealthIndexChartWrapper = styled.div`\n  height: 100%;\n  ${flex.col};\n  justify-content: space-between;\n\n  .total {\n    display: flex;\n    gap: 40px;\n    margin: -4px 24px 0;\n    position: relative;\n\n    &_block {\n      font-size: ${textSizes['12']};\n\n      .counter {\n        position: absolute;\n        top: 0;\n        left: 0;\n      }\n\n      .spacer {\n        opacity: 0;\n      }\n\n      .hidden {\n        display: none;\n      }\n\n      &--cured .h1 {\n        color: ${colors.azure};\n      }\n\n      &--sick {\n        position: relative;\n\n        .h1 {\n          color: ${colors.peach};\n        }\n\n        &:before {\n          content: '';\n          height: 100%;\n          width: 1px;\n          background: ${theme('theme', {\n            light: '#A2C0D4',\n            dark: '#383D40',\n          })};\n          position: absolute;\n          top: 0;\n          left: -20px;\n        }\n      }\n    }\n\n    ${breakpoints.tablet} {\n      .total_block {\n        font-size: ${textSizes['14']};\n\n        .hidden {\n          display: inline;\n        }\n      }\n    }\n\n    ${breakpoints.laptop} {\n      .total_block {\n        font-size: ${textSizes['16']};\n      }\n    }\n  }\n`;","export const y2020 = [\n    {cured: 314, sick: 200},\n    {cured: 200, sick: 400},\n    {cured: 265, sick: 120},\n    {cured: 156, sick: 300},\n    {cured: 412, sick: 200},\n    {cured: 280, sick: 500},\n    {cured: 251, sick: 130},\n    {cured: 180, sick: 300},\n    {cured: 304, sick: 150},\n    {cured: 505, sick: 408},\n    {cured: 328, sick: 200},\n    {cured: 254, sick: 90},\n    {cured: 301, sick: 566},\n    {cured: 459, sick: 189},\n    {cured: 354, sick: 480},\n    {cured: 264, sick: 400},\n    {cured: 309, sick: 200},\n    {cured: 185, sick: 500},\n];\n\nexport const y2021 = [\n    {cured: 450, sick: 250},\n    {cured: 150, sick: 380},\n    {cured: 370, sick: 200},\n    {cured: 300, sick: 180},\n    {cured: 500, sick: 250},\n    {cured: 400, sick: 600},\n    {cured: 200, sick: 300},\n    {cured: 400, sick: 150},\n    {cured: 348, sick: 130},\n    {cured: 400, sick: 280},\n    {cured: 200, sick: 400},\n    {cured: 300, sick: 241},\n    {cured: 380, sick: 480},\n    {cured: 200, sick: 380},\n    {cured: 400, sick: 200},\n    {cured: 500, sick: 250},\n    {cured: 400, sick: 300},\n    {cured: 300, sick: 450},\n];\n\nexport const y2022 = [\n    {cured: 200, sick: 300},\n    {cured: 250, sick: 350},\n    {cured: 390, sick: 240},\n    {cured: 450, sick: 320},\n    {cured: 550, sick: 250},\n    {cured: 420, sick: 200},\n    {cured: 368, sick: 198},\n    {cured: 250, sick: 370},\n    {cured: 322, sick: 200},\n    {cured: 450, sick: 270},\n    {cured: 210, sick: 394},\n    {cured: 180, sick: 270},\n    {cured: 380, sick: 480},\n    {cured: 390, sick: 550},\n    {cured: 450, sick: 210},\n    {cured: 470, sick: 360},\n    {cured: 360, sick: 190},\n    {cured: 300, sick: 250},\n];\n","// styling\nimport {colors, light, dark} from '@styles/vars';\n\n// styled components\nimport {HealthIndexChartWrapper} from '@widgets/HealthIndexChart/style';\n\n// components\nimport Widget from '@components/Widget';\nimport WidgetNav from '@components/Widget/WidgetNav';\nimport WidgetBody from '@components/Widget/WidgetBody';\nimport {ScatterChart, Scatter, ResponsiveContainer, Tooltip, Cell} from 'recharts';\nimport Legend from '@ui/Legend';\nimport LegendItem from '@ui/Legend/LegendItem';\nimport ChartTooltip from '@components/Chart/Tooltip';\nimport CountUp from 'react-countup';\n\n// utils\nimport PropTypes from 'prop-types';\n\n// hooks\nimport useArrayNav from '@hooks/useArrayNav';\nimport usePeriodNav from '@hooks/usePeriodNav';\nimport {useTheme} from 'styled-components';\n\n// data placeholder\nimport {y2020, y2021, y2022} from '@db/health';\n\nconst HealthIndexChart = ({variant}) => {\n    const {theme} = useTheme();\n    const {periods} = usePeriodNav();\n    const {index, navigate} = useArrayNav(periods);\n\n    const averages = [\n        {cured: 75.08, sick: 45.27},\n        {cured: 84.51, sick: 33.12},\n        {cured: 67.14, sick: 48.65},\n    ]\n\n    const getCurrentData = () => {\n        switch (index) {\n            default:\n            case 0:\n                return y2020;\n            case 1:\n                return y2021;\n            case 2:\n                return y2022;\n        }\n    }\n    const data = getCurrentData();\n\n    const CustomScatterShape = ({cx, cy, fill, ...props}) => {\n        const isDominant = variant === 'both' ? props.dom === props.dataKey : props.dataKey === 'cured';\n\n        return (\n            <svg width=\"10\" height=\"222\" viewBox=\"0 0 10 222\" x={cx} y={cy} fill=\"none\"\n                 xmlns=\"http://www.w3.org/2000/svg\">\n                {\n                    isDominant &&\n                    <path opacity=\"0.5\" d=\"M5 28.3799V220.38\"\n                          stroke={`url(#scatter_${props.dataKey})`} strokeWidth=\"2\"\n                          strokeLinecap=\"round\"/>\n                }\n                <path fillRule=\"evenodd\" clipRule=\"evenodd\"\n                      d=\"M5 10C7.76142 10 10 7.76142 10 5C10 2.23858 7.76142 0 5 0C2.23858 0 0 2.23858 0 5C0 7.76142 2.23858 10 5 10Z\"\n                      fill={fill}/>\n                <defs>\n                    <linearGradient id=\"scatter_cured\" x1=\"5.5\" y1=\"220.38\" x2=\"5.5\" y2=\"28.3799\"\n                                    gradientUnits=\"userSpaceOnUse\">\n                        <stop stopColor={theme === 'light' ? light.widgetBg : dark.widgetBg}/>\n                        <stop offset=\"1\" stopColor={colors.azure}/>\n                    </linearGradient>\n                    <linearGradient id=\"scatter_sick\" x1=\"5.5\" y1=\"220.38\" x2=\"5.5\" y2=\"28.3799\"\n                                    gradientUnits=\"userSpaceOnUse\">\n                        <stop stopColor={theme === 'light' ? light.widgetBg : dark.widgetBg}/>\n                        <stop offset=\"1\" stopColor={colors.peach}/>\n                    </linearGradient>\n                </defs>\n            </svg>\n        );\n    }\n\n    return (\n        <Widget name=\"HealthIndexChart\">\n            <WidgetNav sx={{fontSize:22,fontWeight:600}} title=\"Clinic Growth\" handler={navigate}/>\n            <WidgetBody style={{padding: 0, overflow: 'hidden'}}>\n                <HealthIndexChartWrapper>\n                    <div className=\"total\">\n                        <div className=\"total_block total_block--cured\">\n                            <span className=\"spacer h1\">{averages[index].cured}</span>\n                            <CountUp className=\"counter h1\" end={averages[index].cured} duration={2} decimals={2} />\n                            <span><span className=\"hidden\">New</span> Patients</span>\n                        </div>\n                        {\n                            variant === 'both' && (\n                                <div className=\"total_block total_block--sick\">\n                                    <span className=\"spacer h1\">{averages[index].sick}</span>\n                                    <CountUp className=\"counter h1\" end={averages[index].sick} duration={2} decimals={2} />\n                                    <span><span className=\"hidden\">New</span> Certificates</span>\n                                </div>\n                            )\n                        }\n                    </div>\n                    <ResponsiveContainer width=\"100%\" height={250}>\n                        <ScatterChart margin={false} data={data}>\n                            {\n                                variant === 'both' &&\n                                <Scatter dataKey=\"sick\" shape={CustomScatterShape}>\n                                    {data.map((entry, i) => {\n                                        return (\n                                            <Cell key={`cell-${i}`}\n                                                  fill={colors.peach}\n                                                  dom={entry.sick > entry.cured ? 'sick' : 'cured'}\n                                                  dataKey=\"sick\"/>\n                                        )\n                                    })}\n                                </Scatter>\n                            }\n                            <Scatter dataKey=\"cured\" shape={CustomScatterShape}>\n                                {data.map((entry, i) => {\n                                    return (\n                                        <Cell key={`cell-${i}`}\n                                              fill={colors.azure}\n                                              dom={entry.cured > entry.sick ? 'cured' : 'sick'}\n                                              dataKey=\"cured\"/>\n                                    )\n                                })}\n                            </Scatter>\n                            <Tooltip cursor={false} content={<ChartTooltip right/>}/>\n                        </ScatterChart>\n                    </ResponsiveContainer>\n                    <Legend overlay={true}>\n                        <LegendItem color=\"azure\" legend=\"New Patients\"/>\n                        {variant === 'both' && <LegendItem color=\"peach\" legend=\"New Certificates\"/>}\n                    </Legend>\n                </HealthIndexChartWrapper>\n            </WidgetBody>\n        </Widget>\n    )\n}\n\nHealthIndexChart.propTypes = {\n    variant: PropTypes.oneOf(['health', 'both']).isRequired\n}\n\nexport default HealthIndexChart;"],"names":["_ref","current","handler","periods","usePeriodNav","_jsx","Container","children","map","p","Item","Button","className","onClick","nanoid","title","sidePadding","disabled","props","_objectWithoutProperties","_excluded","_jsxs","WidgetHeader","style","Nav","_useState","useState","_useState2","_slicedToArray","period","setPeriod","setPeriodIndex","index","setCurrent","headerRef","useRef","contentRef","height","useContentHeight","useEffect","scrollTop","List","_Fragment","doctors","doctor","DoctorRatingItem","data","id","Widget","name","mobile","flex","paddingBottom","elRef","PeriodNav","WidgetBody","padding","ScrollContainer","ref","Tab","activeKey","transition","Content","Pane","eventKey","Page","DoctorsRatingList","type","HealthIndexChart","variant","DoctorCureRate","HealthIndexChartWrapper","styled","div","withConfig","componentId","col","textSizes","colors","azure","peach","theme","light","dark","breakpoints","tablet","laptop","y2020","cured","sick","y2021","y2022","useTheme","_useArrayNav","useArrayNav","navigate","averages","getCurrentData","CustomScatterShape","_ref2","cx","cy","fill","isDominant","dom","dataKey","width","viewBox","x","y","xmlns","opacity","d","stroke","concat","strokeWidth","strokeLinecap","fillRule","clipRule","x1","y1","x2","y2","gradientUnits","stopColor","widgetBg","offset","WidgetNav","sx","fontSize","fontWeight","overflow","CountUp","end","duration","decimals","ResponsiveContainer","ScatterChart","margin","Scatter","shape","entry","i","Cell","Tooltip","cursor","content","ChartTooltip","right","Legend","overlay","LegendItem","color","legend"],"sourceRoot":""}