{"version":3,"file":"static/js/713.4e8e36b9.chunk.js","mappings":"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","sources":["components/PeriodNav/index.jsx","components/Todos/AddForm/index.jsx","components/Todos/AddForm/style.js","components/Todos/DnDLayout/style.js","components/Todos/Todo/list.js","components/Todos/Todo/planner.js","UI/Checkbox/index.jsx","components/Todos/Todo/index.jsx","components/Todos/DnDLayout/index.jsx","components/Todos/TodosLegend/index.jsx","widgets/TasksList/index.jsx","pages/DashboardC.jsx","widgets/ConfirmedDiagnoses/List/style.js","widgets/PatientCalendar/index.jsx"],"sourcesContent":["// styled components\nimport {Container, Item, Button} from '@ui/TabNav/style';\n\n// hooks\nimport usePeriodNav from '@hooks/usePeriodNav';\n\n// utils\nimport {nanoid} from 'nanoid';\n\nconst PeriodNav = ({current, handler}) => {\n    const {periods} = usePeriodNav();\n\n    return (\n        <Container>\n            {\n                periods.map(p =>\n                    <Item key={nanoid(4)}>\n                        <Button className={current === p && 'active'} onClick={() => handler(p)}>{p}</Button>\n                    </Item>\n                )\n            }\n        </Container>\n    )\n}\n\nexport default PeriodNav;","// styled components\nimport {Form, BtnWrapper, InputWrapper} from './style';\n\n// components\nimport CustomSelect from '@ui/Select';\nimport Field from '@ui/Field';\nimport Btn from '@ui/Btn';\nimport Grow from '@mui/material/Grow';\nimport Collapse from '@mui/material/Collapse';\n\n// utils\nimport {useDispatch} from 'react-redux';\nimport {addTodo, toggleCollapse} from '@store/features/todos';\nimport {tasksOptions} from '@constants/options';\nimport {useState} from 'react';\nimport {nanoid} from 'nanoid';\n\nconst AddForm = ({isVisible, visibilityHandler, variant}) => {\n    const [task, setTask] = useState('');\n    const [category, setCategory] = useState(null);\n    const dispatch = useDispatch();\n    const timestamp = Date.now();\n\n    const handleTaskChange = (e) => {\n        setTask(e.target.value);\n    }\n\n    const handleCategoryChange = e => {\n        setCategory(e);\n    }\n\n    const resetForm = () => {\n        setTask('');\n        setCategory(null);\n        visibilityHandler(false);\n    }\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        if (task !== '' && category !== null) {\n            const id = nanoid(5);\n            dispatch(addTodo({\n                id,\n                name: task,\n                timestamp,\n                label: category.value,\n                expanded: false\n            }));\n            setTimeout(() => dispatch(toggleCollapse({id})), 300);\n            resetForm();\n        }\n    }\n\n    return (\n        <Collapse in={isVisible}>\n            <Grow in={isVisible} timeout={700}>\n                <Form onSubmit={e => handleSubmit(e)} variant={variant}>\n                    <InputWrapper>\n                        <Field placeholder=\"Task\"\n                               value={task}\n                               handler={handleTaskChange}\n                               className=\"field\"\n                        />\n                        <CustomSelect variant=\"basic\"\n                                      placeholder=\"Category\"\n                                      options={tasksOptions}\n                                      value={category}\n                                      changeHandler={handleCategoryChange}/>\n                    </InputWrapper>\n                    <BtnWrapper>\n                        <Btn text=\"Add\" type=\"submit\" className=\"success\"/>\n                        <Btn text=\"Cancel\" className=\"error\" handler={() => resetForm()}/>\n                    </BtnWrapper>\n                </Form>\n            </Grow>\n        </Collapse>\n    )\n}\n\nexport default AddForm;","import styled from 'styled-components/macro';\nimport {colors, dark, flex, light} from '@styles/vars';\nimport theme from 'styled-theming';\n\nconst border = theme('theme', {\n  light: `1px solid ${colors.light_gray} !important`,\n  dark: `1px solid ${colors.dark} !important`,\n})\n\nexport const Form = styled.form`\n  ${flex.col};\n  padding: 20px 22px;\n  background-color: ${theme('theme', {\n    light: light.highlight,\n    dark: dark.highlight,\n  })};\n  border-radius: 8px;\n  margin: ${props => props.variant === 'list' ? '24px' : '0 0 20px 0'};\n  border: ${border};\n`\n\nexport const InputWrapper = styled.div`\n  ${flex.col};\n  gap: 10px;\n  margin-bottom: 20px;\n  \n  .field, .Select__control {\n    border: ${border};\n  }\n`;\n\nexport const BtnWrapper = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 10px;\n`;","import styled from 'styled-components/macro';\nimport theme from 'styled-theming';\nimport {dark, light} from '@styles/vars';\n\nexport const DraggableListItem = styled.div`\n  margin: 0 2px;\n\n  &.selected {\n    .list-item {\n      &:after {\n        opacity: 1;\n      }\n\n      .checkbox label {\n        background-color: ${theme('theme', {\n          dark: dark.highlight\n        })};\n      }\n\n      .category .text {\n        opacity: 1;\n      }\n    }\n  }\n\n  &:last-of-type {\n    .list-item {\n      &:before {\n        display: none;\n      }\n    }\n  }\n`\n\nconst plannerFocused = theme('theme', {\n    light: light.highlight,\n    dark: dark.bodyBg\n});\n\nexport const DraggablePlannerItem = styled.div`\n  .list-item {\n    &:hover, &:focus {\n      background-color: ${plannerFocused};\n    }\n  }\n\n  &.selected .list-item {\n    background-color: ${plannerFocused};\n  }\n`;","import styled from 'styled-components/macro';\nimport theme from 'styled-theming';\nimport {colors, dark, effects, flex, fonts, light, textSizes, breakpoints} from '@styles/vars';\n\nexport const Label = styled.span`\n  display: none;\n  align-items: center;\n  line-height: ${textSizes['10']};\n  gap: 6px;\n  font-size: ${textSizes['10']};\n  font-family: ${fonts.accent};\n  text-transform: uppercase;\n\n  .text {\n    opacity: 0;\n    transition: opacity var(--transition);\n  }\n\n  ${breakpoints.mobileL} {\n    display: flex;\n  }\n\n  ${breakpoints.tablet} {\n    .text {\n      display: none;\n    }\n  }\n\n  ${breakpoints.laptop} {\n    .text {\n      display: inline;\n    }\n  }\n`\n\nexport const ListItemContainer = styled.div`\n  padding: 20px 22px;\n  position: relative;\n  cursor: grab;\n\n  * {\n    user-select: none !important;\n  }\n\n  input {\n    cursor: grab;\n  }\n\n  &:before, &:after {\n    content: '';\n    position: absolute;\n    width: 100%;\n  }\n\n  &:before {\n    content: '';\n    position: absolute;\n    left: 24px;\n    bottom: 0;\n    width: calc(100% - 48px);\n    border-bottom: ${theme('theme', {\n      light: effects.dashedLight,\n      dark: effects.dashedDark\n    })};\n  }\n\n  &:after {\n    display: block;\n    border-radius: 8px;\n    height: 100%;\n    top: -1px;\n    left: 0;\n    background-color: ${theme('theme', {\n      light: light.widgetBg,\n      dark: light.text\n    })};\n    box-shadow: 0 1px 8px rgba(65, 77, 85, 0.4);\n    z-index: 1;\n    opacity: 0;\n    transition: opacity var(--transition);\n    border-bottom: 2px ${props => colors[props.color]} solid;\n  }\n\n  .dots {\n    color: ${theme('theme', {\n      light: light.text,\n      dark: dark.text\n    })};\n    opacity: 0;\n    transition: opacity var(--transition);\n  }\n\n  &:hover {\n    &:after,\n    ${Label} .text,\n    .dots {\n      opacity: 1;\n    }\n\n    .checkbox label {\n      background-color: ${theme('theme', {\n        dark: dark.highlight\n      })};\n    }\n  }\n`\n\nexport const Content = styled.div`\n  position: relative;\n  z-index: 2;\n  display: flex;\n  gap: 12px;\n`\n\nexport const Main = styled.div`\n  ${flex.col};\n  gap: 10px;\n  flex-grow: 1;\n`\n\nexport const Secondary = styled.div`\n  ${flex.col};\n  justify-content: flex-end;\n  align-items: flex-end;\n`\n\n","import styled from 'styled-components/macro';\nimport theme from 'styled-theming';\nimport {dark, light, flex} from '@styles/vars';\n\nexport const PlannerItemContainer = styled.div`\n  background-color: ${theme('theme', {\n    light: light.bodyBg,\n    dark: dark.highlight\n  })};\n  padding: 20px 20px 20px 24px;\n  border-radius: 8px;\n  margin-bottom: 20px;\n  display: flex;\n  ${flex.between};\n  transition: background-color var(--transition);\n  cursor: grab;\n\n  * {\n    user-select: none;\n  }\n`;\n\nexport const Wrapper = styled.div`\n  ${flex.col};\n  gap: 6px;\n`;\n\nexport const TimestampWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n`;","// styling\nimport styled from 'styled-components/macro';\nimport theme from 'styled-theming';\nimport {colors, light, flex} from '@styles/vars'\n\n// utils\nimport PropTypes from 'prop-types';\n\nconst Square = styled.div`\n  input {\n    display: none;\n\n    &:checked + label span {\n      opacity: 1;\n    }\n  }\n\n  label {\n    ${flex.col};\n    ${flex.center};\n    width: 20px;\n    height: 20px;\n    border-radius: 4px;\n    background-color: ${theme('theme', {\n      light: colors.light_gray,\n      dark: light.text\n    })};\n    cursor: pointer;\n    transition: var(--transition);\n    position: relative;\n\n    span {\n      display: block;\n      border-radius: 2px;\n      background-color: ${colors.blue};\n      width: 12px;\n      height: 12px;\n      transition: opacity var(--transition);\n      opacity: 0;\n    }\n  }\n`\n\nconst Basic = styled.div`\n  input {\n    display: none;\n    &:checked + label {\n      color: ${colors.blue};\n    }\n  }\n\n  label {\n    color: #BBCDD9;\n    transition: var(--transition);\n\n    &:hover, &:focus {\n      color: ${colors.blue};\n    }\n  }\n`;\n\nconst Checkbox = ({variant, handler, checked, id}) => {\n    const commonProps = {\n        type: 'checkbox',\n        id,\n        defaultChecked: checked,\n        onChange: handler\n    }\n\n    const Layout = () => {\n        switch (variant) {\n            default:\n            case 'square':\n                return (\n                    <Square className=\"checkbox\">\n                        <input {...commonProps} />\n                        <label htmlFor={id} tabIndex={0}>\n                            <span></span>\n                        </label>\n                    </Square>\n                )\n            case 'basic':\n                return (\n                    <Basic>\n                        <input {...commonProps} />\n                        <label htmlFor={id} tabIndex={0}>\n                            <i className=\"icon icon-check\"/>\n                        </label>\n                    </Basic>\n                )\n        }\n    }\n\n    return <Layout/>\n}\n\nCheckbox.propTypes = {\n    variant: PropTypes.oneOf(['square', 'basic']).isRequired,\n    handler: PropTypes.func,\n    checked: PropTypes.bool,\n    id: PropTypes.string\n}\n\nexport default Checkbox;","// styled components\nimport {BasicBadge} from '@ui/Badge/style';\nimport {ListItemContainer, Content, Main, Label, Secondary} from './list';\nimport {PlannerItemContainer, Wrapper, TimestampWrapper} from '@components/Todos/Todo/planner';\n\n// components\nimport Timestamp from '@ui/Timestamp';\nimport Checkbox from '@ui/Checkbox';\nimport Collapse from '@mui/material/Collapse';\nimport {Badge} from '@ui/Badge/style';\n\n// utils\nimport {toggleComplete} from '@store/features/todos';\nimport {tasksColors} from '@constants/colors';\nimport moment from 'moment';\n\n// hooks\nimport {useDispatch} from 'react-redux';\n\nconst Todo = ({data, variant}) => {\n    const {id, name, timestamp, complete, label, expanded} = data;\n    const dispatch = useDispatch();\n    const color = tasksColors.find(({cat}) => cat === label).color;\n\n    const TodoLayout = () => {\n        switch (variant) {\n            default:\n            case 'list':\n                return (\n                    <ListItemContainer color={color} className=\"list-item\" tabIndex={0}>\n                        <Content>\n                            <Checkbox variant=\"square\" id={`task-${id}`} checked={complete}\n                                      handler={() => dispatch(toggleComplete({id}))}/>\n                            <Main>\n                                <input type=\"text\" defaultValue={name} readOnly={true} />\n                            </Main>\n                           \n                        </Content>\n                        \n                    </ListItemContainer>\n                    \n                )\n            case 'planner':\n                return (\n                    <PlannerItemContainer className=\"list-item\" tabIndex={0}>\n                        <Wrapper>\n                            <span>{name}</span>\n                            <TimestampWrapper>\n                                <Badge color={color}/>\n                                <Timestamp date={moment(timestamp).toDate()} time={true}/>\n                            </TimestampWrapper>\n                        </Wrapper>\n                        <Checkbox variant=\"basic\" id={`task-${id}`} checked={complete}\n                                  handler={() => dispatch(toggleComplete({id}))}/>\n                    </PlannerItemContainer>\n                )\n        }\n    }\n\n    return (\n        <Collapse in={expanded} timeout={300}>\n            <TodoLayout/>\n        </Collapse>\n    )\n}\n\nexport default Todo;","// styled components\nimport {DraggableListItem, DraggablePlannerItem} from './style';\n\n// components\nimport Todo from '@components/Todos/Todo';\nimport {\n    DndContext,\n    closestCenter,\n    TouchSensor,\n    PointerSensor,\n    useSensor,\n    useSensors,\n} from '@dnd-kit/core';\nimport {\n    arrayMove,\n    SortableContext,\n    verticalListSortingStrategy,\n    useSortable\n} from '@dnd-kit/sortable';\nimport {CSS} from '@dnd-kit/utilities';\nimport {restrictToVerticalAxis} from '@dnd-kit/modifiers';\n\n// hooks\nimport {useDispatch, useSelector} from 'react-redux';\nimport useMobileDetect from 'use-mobile-detect-hook';\n\n// utils\nimport propTypes from 'prop-types';\nimport {updateOrder} from '@store/features/todos';\n\nconst DnDLayout = ({variant}) => {\n    const device = useMobileDetect();\n    const todos = useSelector(state => state['todos'].todos);\n    const dispatch = useDispatch();\n    const DnDItem = variant === 'list' ? DraggableListItem : DraggablePlannerItem;\n    const sensors = useSensors(useSensor(PointerSensor, {\n        activationConstraint: {\n            distance: 15,\n        }\n    }), useSensor(TouchSensor, {\n        activationConstraint: {\n            delay: 2000,\n            tolerance: 5,\n        },\n    }));\n\n    const SortableItem = (props) => {\n        const {\n            attributes,\n            listeners,\n            setNodeRef,\n            transform,\n            transition,\n            isOver,\n            isDragging,\n        } = useSortable({id: props.id});\n\n        const style = {\n            transform: CSS.Transform.toString(transform),\n            transition,\n            zIndex: isOver || isDragging ? 10 : 0,\n            position: 'relative',\n            touchAction: 'none',\n        };\n\n        return (\n            <div ref={setNodeRef} style={style} {...attributes} {...listeners}>\n                {props.children}\n            </div>\n        );\n    }\n\n    const onDragEnd = e => {\n        const {active, over} = e;\n\n        if (active.id !== over.id) {\n            const oldIndex = todos.findIndex(({id}) => id === active.id);\n            const newIndex = todos.findIndex(({id}) => id === over.id);\n            dispatch(updateOrder(arrayMove(todos, oldIndex, newIndex)));\n        }\n    }\n\n    return (\n        <DndContext sensors={sensors} collisionDetection={closestCenter} onDragEnd={onDragEnd}\n                    modifiers={[restrictToVerticalAxis]} autoScroll={true}>\n            <SortableContext items={todos} strategy={verticalListSortingStrategy} disabled={!device.isDesktop()}>\n                {todos.map(todo => (\n                    <SortableItem key={todo.id} id={todo.id}>\n                        <DnDItem>\n                            <Todo data={todo} variant={variant}/>\n                        </DnDItem>\n                    </SortableItem>\n                ))}\n            </SortableContext>\n        </DndContext>\n    )\n}\n\nDnDLayout.propTypes = {\n    variant: propTypes.oneOf(['planner', 'list']).isRequired\n}\n\nexport default DnDLayout;","import {tasksColors} from '@constants/colors';\nimport LegendItem from '@ui/Legend/LegendItem';\nimport Legend from '@ui/Legend';\n\nexport default function TodosLegend() {\n    return (\n        <Legend>\n            {tasksColors.map(({color, cat}) => <LegendItem key={cat} color={color} legend={cat} />)}\n        </Legend>\n    )\n}","// styling\nimport styled from 'styled-components/macro';\n// styled components\nimport { Form, BtnWrapper, InputWrapper } from '../../components/Todos/AddForm/style';\nimport DatePicker from \"react-datepicker\";\n\nimport \"react-datepicker/dist/react-datepicker.css\";\n// components\nimport CustomSelect from '@ui/Select';\nimport Field from '@ui/Field';\nimport Grow from '@mui/material/Grow';\nimport Collapse from '@mui/material/Collapse';\n// utils\nimport { useDispatch } from 'react-redux';\nimport { addTodo, toggleCollapse } from '@store/features/todos';\nimport { tasksOptions } from '@constants/options';\nimport { useState } from 'react';\nimport { nanoid } from 'nanoid';\n// components\nimport Widget from '@components/Widget';\nimport WidgetHeader from '@components/Widget/WidgetHeader';\nimport { Navbar } from '@components/Widget/style';\nimport Btn from '@ui/Btn'\nimport TodosLegend from '@components/Todos/TodosLegend';\nimport AddForm from '@components/Todos/AddForm';\nimport DnDLayout from '@components/Todos/DnDLayout';\nimport ScrollContainer from '@components/ScrollContainer';\n// hooks\nimport { useSelector } from 'react-redux';\nimport { useRef, useEffect } from 'react';\nimport useContentHeight from '@hooks/useContentHeight';\nimport { InputLabel, TextField, FormControl, MenuItem, Paper, Typography, Select } from '@mui/material';\nimport { BookAppointment, GetAllUSers, GetEmployess, GetLocation, GetPatientAppointment, GetTypeAppointment } from '@components/Api/AllApi';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport Cookies from 'js-cookie';\nconst Footer = styled.div`\n  padding: 2px 24px 22px 24px;\n`;\n\nconst TasksList = () => {\n    const [open, setOpen] = useState(false);\n    const [filteredOptions, setFilteredOptions] = useState([]);\n    const [selectedPatientId, setSelectedPatientId] = useState(null);\n    const [patientName, setPatientName] = useState('');\n    const [employeeId, setEmployeeId] = useState('');\n    const [clinicLocation, setClinicLocation] = useState('');\n    const [type, setType] = useState('');\n    const [startDate, setStartDate] = useState(new Date());\n    const [endDate, setEndDate] = useState(new Date());\n    const [note, setNote] = useState('');\n    const [appointmentColor, setAppointmentColor] = useState('');\n    const todos = useSelector(state => state['todos'].todos);\n    const [isFormVisible, setFormVisible] = useState(false);\n    const [optionsData, setOptions] = useState([]);\n\n    const [ttt, setTTT] = useState(false)\n    const [GetLoc, setGetLoc] = useState(false)\n    const [GetEmpl, setGetEmp] = useState(false)\n    const headerRef = useRef(null);\n    const footerRef = useRef(null);\n    const listRef = useRef(null);\n    const height = useContentHeight(headerRef, footerRef);\n    const dataFromLocalStorage = localStorage.getItem(\"clinic\");\n\n    // Parse the JSON data back to an object\n    const parsedData = JSON.parse(dataFromLocalStorage);\n\n    // Now, \"parsedData\" will contain the full object with all the properties that were originally present in the `data` object\n    console.log(parsedData, \"AL Data AAAAAAAAAAAAAAAAAAAAA\");\n\n    const ValueID = parsedData.id;\n    const ClinicID = parsedData.clinic_id;\n\n\n    const [task, setTask] = useState('');\n    const [category, setCategory] = useState(null);\n    const dispatch = useDispatch();\n    const timestamp = Date.now();\n\n    const handleTaskChange = (e) => {\n        setTask(e.target.value);\n    }\n\n    const handleCategoryChange = e => {\n        setCategory(e);\n    }\n\n    const resetForm = () => {\n        setTask('');\n        setCategory(null);\n    }\n\n\n\n    const handleSubmit = (event) => {\n        let token = Cookies.get(\"clinic\");\n        console.log(token, \"This Is token for all Api's\");\n        event.preventDefault();\n        var myHeaders = new Headers();\n        myHeaders.append(\"Accept\", \"application/json\");\n        myHeaders.append(\"Authorization\", `Bearer ${token}`);\n\n        var formdata = new FormData();\n        console.log(selectedPatientId, \"SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS\")\n        formdata.append(\"patient_id\", selectedPatientId);\n        formdata.append(\"doctor_id\", employeeId);\n        formdata.append(\"clinic_id\", ClinicID);\n        formdata.append(\"clinic_location_id\", clinicLocation);\n        formdata.append(\"type_id\", type);\n        formdata.append(\"start_date\", startDate);\n        formdata.append(\"end_date\", startDate);\n        formdata.append(\"note\", note);\n        formdata.append(\"appointment_color\", appointmentColor);\n\n        var requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n            body: formdata,\n            redirect: 'follow'\n        };\n\n        return fetch(\"https://medical.studiomyraa.com/api/clinic_appointment\", requestOptions)\n            .then((res) => res.json())\n            .then((json) => {\n                console.log(json, \"anjkhgdchjm\");\n                alert(json.messege)\n            })\n            .catch((e) => console.log(e));\n\n    };\n\n\n\n\n\n\n\n\n    useEffect(() => {\n        GetAllTypeAppointmentData();\n        getPatientData();\n        GetLoca();\n        GetEmp();\n    }, [patientName]);\n\n\n    const getPatientData = async () => {\n        if (patientName) {\n            try {\n                // Get the clinic ID from where it's available, or define it properly\n                const Filerpatient = await GetPatientAppointment(patientName);\n                console.log(Filerpatient, \"IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIii\");\n\n                if (Filerpatient) {\n                    // Here, we check if Filerpatient is an object with a \"then\" function (i.e., a Promise).\n                    if (typeof Filerpatient.then === 'function') {\n                        // If it's a Promise, we use \"await\" to get the resolved data.\n                        const data = await Filerpatient;\n                        console.log(data.results, \"AAAAAAAAAAAAAA\");\n                        setFilteredOptions(data.results)\n                    } else {\n                        console.log(Filerpatient.results?.[0]?.name, \"AAAAAAAAAAAAAA\");\n                        setFilteredOptions(Filerpatient.results)\n                        console.log(Filerpatient.results, \"UUUUUUUUUUUUUUUuu\")\n                    }\n                }\n            } catch (error) {\n                console.error('Error fetching patient data:', error);\n                setOptions([]);\n            }\n        } else {\n            setOptions([]);\n        }\n    };\n    const GetAllTypeAppointmentData = () => {\n        let TyoeData = GetTypeAppointment()\n        if (TyoeData) {\n            TyoeData.then((data) => {\n                console.log(data.result)\n                setTTT(data.result)\n            })\n        }\n    }\n\n\n    const handleChange = (event) => {\n        setPatientName(event.target.value);\n    };\n\n    const handleInputFocus = () => {\n        setOpen(true);\n    };\n\n    const handleInputBlur = () => {\n        setOpen(false);\n    };\n\n    const [selectedDate, setSelectedDate] = useState(null);\n\n    const handleDateChange = (date) => {\n        setSelectedDate(date);\n    };\n\n\n\n    const GetLoca = () => {\n        let TyoeData = GetLocation()\n        if (TyoeData) {\n            TyoeData.then((data) => {\n                console.log(data.result)\n                setGetLoc(data.result)\n            })\n        }\n    }\n\n    const GetEmp = () => {\n        let TyoeData = GetAllUSers()\n        if (TyoeData) {\n            TyoeData.then((data) => {\n                console.log(data.result)\n                setGetEmp(data.result)\n            })\n        }\n    }\n\n\n\n    return (\n        <Widget name=\"TasksList\" mobile={600}>\n\n\n            <Form onSubmit={handleSubmit} >\n                <InputLabel sx={{ margin: 1 }}>Patient search</InputLabel>\n\n                <Autocomplete\n                    size=\"small\"\n                    required\n                    options={filteredOptions}\n                    getOptionLabel={(option) => option.name}\n                    sx={{ width: 300 }}\n\n                    renderInput={(params) => <TextField {...params} />}\n                    onInputChange={(event, newValue) => setPatientName(newValue)}\n                    onChange={(event, newValue) => {\n                        if (newValue) {\n                            setSelectedPatientId(newValue.id); // Update selectedPatientId with the ID of the selected option\n                            getPatientData(newValue.id); // Call getPatientData with the selected option's ID\n                        } else {\n                            setSelectedPatientId(null); // Clear selectedPatientId if no option is selected\n                        }\n                    }}\n                />\n\n\n                <InputLabel sx={{ margin: 1 }}>Select Employee</InputLabel>\n                <Select\n                    labelId=\"dropdown-label\"\n                    fullWidth\n                    size='small'\n                    required\n                    value={employeeId} onChange={(e) => setEmployeeId(e.target.value)}\n                >\n                    {\n                        GetEmpl && GetEmpl?.map((data) => {\n                            return (\n                                <MenuItem value={data.id}>{data.name}</MenuItem>\n                            )\n                        })\n                    }\n\n\n                </Select>\n\n                <InputLabel sx={{ margin: 1 }}>Clinic location</InputLabel>\n                <Select\n                    labelId=\"dropdown-label\"\n                    fullWidth\n                    size='small'\n                    required\n                    value={clinicLocation}\n                    onChange={(e) => setClinicLocation(e.target.value)}\n                >\n                    {\n                        GetLoc && GetLoc?.map((data) => {\n                            return (\n\n                                <MenuItem value={data.id}>{data.city}</MenuItem>\n                            )\n                        })\n                    }\n                </Select>\n\n                <InputLabel sx={{ margin: 1 }}>Type</InputLabel>\n                <Select\n                    labelId=\"dropdown-label\"\n                    fullWidth\n                    size='small'\n                    value={type}\n                    required\n                    onChange={(e) => setType(e.target.value)}\n                >\n                    {\n                        ttt && ttt?.map((data) => {\n                            return (\n\n                                <MenuItem value={data.id}>{data.name}{data.length}</MenuItem>\n                            )\n                        })\n                    }\n\n                </Select>\n\n                <InputLabel sx={{ margin: 1 }}>Appointment Date/Time</InputLabel>\n                <TextField\n                    // onChange={handleDateChange}\n                    value={startDate}\n                    required\n                    onChange={(e) => {\n                        const inputDate = e.target.value;\n                        setStartDate(inputDate);\n                    }}\n                    type=\"datetime-local\"\n\n                    placeholder=\"Select Start Date\"\n                    fullWidth size=\"small\"\n                />\n\n                <InputLabel sx={{ margin: 1 }}>Appointment End Date/Time</InputLabel>\n                <TextField\n                    required\n                    value={endDate}\n                    onChange={(e) => {\n                        const inputDate = e.target.value;\n                        setEndDate(inputDate)\n                    }}\n                    type=\"datetime-local\"\n\n                    placeholder=\"Select End Date\"\n                    fullWidth size=\"small\"\n                />\n\n                <InputLabel sx={{ margin: 1 }}>Notes</InputLabel>\n                <TextField size=\"small\" value={note} onChange={(e) => setNote(e.target.value)} fullWidth required />\n\n                <InputLabel sx={{ margin: 1 }}>Appointment Color</InputLabel>\n                <TextField\n                    size=\"small\"\n                    value={appointmentColor}\n                    onChange={(e) => setAppointmentColor(e.target.value)}\n                    fullWidth\n                    required\n\n                    // You can add the \"type\" attribute with a value of \"color\" to provide a color picker input.\n                    type=\"color\"\n\n                    // You can set a placeholder to provide a hint to users about the expected format or color value.\n                    placeholder=\"#RRGGBB\"  // Replace with the format you prefer.\n                />\n\n\n\n                <button style={{ width: '100%', height: 40, marginTop: 15, backgroundColor: 'skyblue', color: 'white', borderRadius: 4 }}>Create Appointment</button>\n\n            </Form>\n        </Widget>\n    )\n}\n\nexport default TasksList;","// components\nimport Page from '@layout/Page';\nimport TasksList from '@widgets/TasksList';\nimport ConfirmedDiagnoses from '@widgets/ConfirmedDiagnoses';\nimport DiagnosesDonut from '@widgets/DiagnosesDonut';\nimport RadarAreaChart from '@widgets/RadarAreaChart';\nimport PatientCalendar from '@widgets/PatientCalendar';\n// utils\nimport { useState } from 'react';\nimport { Box } from '@mui/material';\nimport Sidebar from '@layout/Sidebar';\nimport Panel from '@layout/Panel';\n\n\n\n\n\nconst DashboardC = () => {\n    const [currentView, setView] = useState('day');\n\n    let pageTitle = '';\n    switch (currentView) {\n        case 'week':\n            pageTitle = 'Available Appointments Time';\n            break;\n        case 'month':\n            pageTitle = 'Appointments Schedule';\n            break;\n        default:\n            pageTitle = 'Your appointments';\n            break;\n    }\n    return (\n\n        <>\n            <Sidebar />\n            <Panel />\n            <Box title=\"Appointments\" sx={{ display: 'flex', marginTop: 3, gap: 5 }}>\n                <div key=\"task-list\">\n                    <TasksList />\n                </div>\n                <div key=\"task-list\">\n                    <PatientCalendar current={currentView} handler={setView} />\n                </div>\n\n\n            </Box>\n        </>\n\n\n    )\n}\n\nexport default DashboardC;","import styled from 'styled-components/macro';\nimport {flex, textSizes, fonts} from '@styles/vars';\n\nexport const List = styled.ul`\n  gap: 22px;\n  margin-top: 20px;\n  ${flex.col}\n`\n\nexport const Block = styled.div`\n  display: flex;\n  ${flex.between}\n  margin-bottom: 7px;\n  font-size: ${textSizes['14']};\n`\n\nexport const Text = styled.div`\n  display: flex;\n  gap: 4px;\n  font-family: ${fonts.accent};\n  \n  .num {\n    font-weight: 500;\n  }\n  & + .label {\n    text-transform: capitalize;\n  }\n`","// components\nimport Widget from '@components/Widget';\nimport AppointmentsCalendar from '@components/AppointmentsCalendar';\n\nconst PatientCalendar = ({handler, current}) => {\n    return (\n        <Widget name=\"PatientCalendar\">\n            <AppointmentsCalendar current={current} viewChangeHandler={handler} type=\"patient\"/>\n        </Widget>\n    )\n}\n\nexport default PatientCalendar;"],"names":["_ref","current","handler","periods","usePeriodNav","_jsx","Container","children","map","p","Item","Button","className","onClick","nanoid","isVisible","visibilityHandler","variant","_useState","useState","_useState2","_slicedToArray","task","setTask","_useState3","_useState4","category","setCategory","dispatch","useDispatch","timestamp","Date","now","resetForm","Collapse","in","Grow","timeout","_jsxs","Form","onSubmit","e","preventDefault","id","addTodo","name","label","value","expanded","setTimeout","toggleCollapse","handleSubmit","InputWrapper","Field","placeholder","target","CustomSelect","options","tasksOptions","changeHandler","BtnWrapper","Btn","text","type","border","theme","light","concat","colors","light_gray","dark","styled","form","withConfig","componentId","flex","col","highlight","props","div","DraggableListItem","plannerFocused","bodyBg","DraggablePlannerItem","Label","span","textSizes","fonts","accent","breakpoints","mobileL","tablet","laptop","ListItemContainer","effects","dashedLight","dashedDark","widgetBg","color","Content","Main","PlannerItemContainer","between","Wrapper","TimestampWrapper","Square","center","blue","Basic","checked","commonProps","defaultChecked","onChange","Layout","_objectSpread","htmlFor","tabIndex","data","complete","tasksColors","find","_ref2","cat","TodoLayout","Checkbox","toggleComplete","defaultValue","readOnly","Badge","Timestamp","date","moment","toDate","time","device","useMobileDetect","todos","useSelector","state","DnDItem","sensors","useSensors","useSensor","PointerSensor","activationConstraint","distance","TouchSensor","delay","tolerance","SortableItem","_useSortable","useSortable","attributes","listeners","setNodeRef","transform","transition","isOver","isDragging","style","CSS","Transform","toString","zIndex","position","touchAction","ref","DndContext","collisionDetection","closestCenter","onDragEnd","active","over","oldIndex","findIndex","newIndex","_ref3","updateOrder","arrayMove","modifiers","restrictToVerticalAxis","autoScroll","SortableContext","items","strategy","verticalListSortingStrategy","disabled","isDesktop","todo","Todo","TodosLegend","Legend","LegendItem","legend","filteredOptions","setFilteredOptions","_useState5","_useState6","selectedPatientId","setSelectedPatientId","_useState7","_useState8","patientName","setPatientName","_useState9","_useState10","employeeId","setEmployeeId","_useState11","_useState12","clinicLocation","setClinicLocation","_useState13","_useState14","setType","_useState15","_useState16","startDate","setStartDate","_useState17","_useState18","endDate","setEndDate","_useState19","_useState20","note","setNote","_useState21","_useState22","appointmentColor","setAppointmentColor","_useState23","_useState24","_useState25","_useState26","setOptions","_useState27","_useState28","ttt","setTTT","_useState29","_useState30","GetLoc","setGetLoc","_useState31","_useState32","GetEmpl","setGetEmp","headerRef","useRef","footerRef","dataFromLocalStorage","useContentHeight","localStorage","getItem","parsedData","JSON","parse","console","log","ClinicID","clinic_id","_useState33","_useState34","_useState35","_useState36","useEffect","GetAllTypeAppointmentData","getPatientData","GetLoca","GetEmp","_asyncToGenerator","_regeneratorRuntime","mark","_callee","Filerpatient","_Filerpatient$results","_Filerpatient$results2","wrap","_context","prev","next","GetPatientAppointment","sent","then","results","t0","error","stop","apply","arguments","TyoeData","GetTypeAppointment","result","_useState37","_useState38","GetLocation","GetAllUSers","Widget","mobile","event","token","Cookies","get","myHeaders","Headers","append","formdata","FormData","fetch","method","headers","body","redirect","res","json","alert","messege","catch","InputLabel","sx","margin","Autocomplete","size","required","getOptionLabel","option","width","renderInput","params","TextField","onInputChange","newValue","Select","labelId","fullWidth","MenuItem","city","length","inputDate","height","marginTop","backgroundColor","borderRadius","currentView","setView","_Fragment","Sidebar","Panel","Box","title","display","gap","TasksList","PatientCalendar","ul","AppointmentsCalendar","viewChangeHandler"],"sourceRoot":""}