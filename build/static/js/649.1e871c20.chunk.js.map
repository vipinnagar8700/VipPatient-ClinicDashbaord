{"version":3,"file":"static/js/649.1e871c20.chunk.js","mappings":"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","sources":["components/PeriodNav/index.jsx","components/Todos/AddForm/index.jsx","components/Todos/AddForm/style.js","components/Todos/DnDLayout/style.js","components/Todos/Todo/list.js","components/Todos/Todo/planner.js","UI/Checkbox/index.jsx","components/Todos/Todo/index.jsx","components/Todos/DnDLayout/index.jsx","components/Todos/TodosLegend/index.jsx","widgets/TasksList/index.jsx","components/CustomAppointment.js/Calender.js","pages/DashboardC.jsx","widgets/ConfirmedDiagnoses/List/style.js","widgets/PatientCalendar/index.jsx","../node_modules/@mui/icons-material/Edit.js"],"sourcesContent":["// styled components\nimport {Container, Item, Button} from '@ui/TabNav/style';\n\n// hooks\nimport usePeriodNav from '@hooks/usePeriodNav';\n\n// utils\nimport {nanoid} from 'nanoid';\n\nconst PeriodNav = ({current, handler}) => {\n    const {periods} = usePeriodNav();\n\n    return (\n        <Container>\n            {\n                periods.map(p =>\n                    <Item key={nanoid(4)}>\n                        <Button className={current === p && 'active'} onClick={() => handler(p)}>{p}</Button>\n                    </Item>\n                )\n            }\n        </Container>\n    )\n}\n\nexport default PeriodNav;","// styled components\nimport {Form, BtnWrapper, InputWrapper} from './style';\n\n// components\nimport CustomSelect from '@ui/Select';\nimport Field from '@ui/Field';\nimport Btn from '@ui/Btn';\nimport Grow from '@mui/material/Grow';\nimport Collapse from '@mui/material/Collapse';\n\n// utils\nimport {useDispatch} from 'react-redux';\nimport {addTodo, toggleCollapse} from '@store/features/todos';\nimport {tasksOptions} from '@constants/options';\nimport {useState} from 'react';\nimport {nanoid} from 'nanoid';\n\nconst AddForm = ({isVisible, visibilityHandler, variant}) => {\n    const [task, setTask] = useState('');\n    const [category, setCategory] = useState(null);\n    const dispatch = useDispatch();\n    const timestamp = Date.now();\n\n    const handleTaskChange = (e) => {\n        setTask(e.target.value);\n    }\n\n    const handleCategoryChange = e => {\n        setCategory(e);\n    }\n\n    const resetForm = () => {\n        setTask('');\n        setCategory(null);\n        visibilityHandler(false);\n    }\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        if (task !== '' && category !== null) {\n            const id = nanoid(5);\n            dispatch(addTodo({\n                id,\n                name: task,\n                timestamp,\n                label: category.value,\n                expanded: false\n            }));\n            setTimeout(() => dispatch(toggleCollapse({id})), 300);\n            resetForm();\n        }\n    }\n\n    return (\n        <Collapse in={isVisible}>\n            <Grow in={isVisible} timeout={700}>\n                <Form onSubmit={e => handleSubmit(e)} variant={variant}>\n                    <InputWrapper>\n                        <Field placeholder=\"Task\"\n                               value={task}\n                               handler={handleTaskChange}\n                               className=\"field\"\n                        />\n                        <CustomSelect variant=\"basic\"\n                                      placeholder=\"Category\"\n                                      options={tasksOptions}\n                                      value={category}\n                                      changeHandler={handleCategoryChange}/>\n                    </InputWrapper>\n                    <BtnWrapper>\n                        <Btn text=\"Add\" type=\"submit\" className=\"success\"/>\n                        <Btn text=\"Cancel\" className=\"error\" handler={() => resetForm()}/>\n                    </BtnWrapper>\n                </Form>\n            </Grow>\n        </Collapse>\n    )\n}\n\nexport default AddForm;","import styled from 'styled-components/macro';\nimport {colors, dark, flex, light} from '@styles/vars';\nimport theme from 'styled-theming';\n\nconst border = theme('theme', {\n  light: `1px solid ${colors.light_gray} !important`,\n  dark: `1px solid ${colors.dark} !important`,\n})\n\nexport const Form = styled.form`\n  ${flex.col};\n  padding: 20px 22px;\n  background-color: ${theme('theme', {\n    light: light.highlight,\n    dark: dark.highlight,\n  })};\n  border-radius: 8px;\n  margin: ${props => props.variant === 'list' ? '24px' : '0 0 20px 0'};\n  border: ${border};\n`\n\nexport const InputWrapper = styled.div`\n  ${flex.col};\n  gap: 10px;\n  margin-bottom: 20px;\n  \n  .field, .Select__control {\n    border: ${border};\n  }\n`;\n\nexport const BtnWrapper = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 10px;\n`;","import styled from 'styled-components/macro';\nimport theme from 'styled-theming';\nimport {dark, light} from '@styles/vars';\n\nexport const DraggableListItem = styled.div`\n  margin: 0 2px;\n\n  &.selected {\n    .list-item {\n      &:after {\n        opacity: 1;\n      }\n\n      .checkbox label {\n        background-color: ${theme('theme', {\n          dark: dark.highlight\n        })};\n      }\n\n      .category .text {\n        opacity: 1;\n      }\n    }\n  }\n\n  &:last-of-type {\n    .list-item {\n      &:before {\n        display: none;\n      }\n    }\n  }\n`\n\nconst plannerFocused = theme('theme', {\n    light: light.highlight,\n    dark: dark.bodyBg\n});\n\nexport const DraggablePlannerItem = styled.div`\n  .list-item {\n    &:hover, &:focus {\n      background-color: ${plannerFocused};\n    }\n  }\n\n  &.selected .list-item {\n    background-color: ${plannerFocused};\n  }\n`;","import styled from 'styled-components/macro';\nimport theme from 'styled-theming';\nimport {colors, dark, effects, flex, fonts, light, textSizes, breakpoints} from '@styles/vars';\n\nexport const Label = styled.span`\n  display: none;\n  align-items: center;\n  line-height: ${textSizes['10']};\n  gap: 6px;\n  font-size: ${textSizes['10']};\n  font-family: ${fonts.accent};\n  text-transform: uppercase;\n\n  .text {\n    opacity: 0;\n    transition: opacity var(--transition);\n  }\n\n  ${breakpoints.mobileL} {\n    display: flex;\n  }\n\n  ${breakpoints.tablet} {\n    .text {\n      display: none;\n    }\n  }\n\n  ${breakpoints.laptop} {\n    .text {\n      display: inline;\n    }\n  }\n`\n\nexport const ListItemContainer = styled.div`\n  padding: 20px 22px;\n  position: relative;\n  cursor: grab;\n\n  * {\n    user-select: none !important;\n  }\n\n  input {\n    cursor: grab;\n  }\n\n  &:before, &:after {\n    content: '';\n    position: absolute;\n    width: 100%;\n  }\n\n  &:before {\n    content: '';\n    position: absolute;\n    left: 24px;\n    bottom: 0;\n    width: calc(100% - 48px);\n    border-bottom: ${theme('theme', {\n      light: effects.dashedLight,\n      dark: effects.dashedDark\n    })};\n  }\n\n  &:after {\n    display: block;\n    border-radius: 8px;\n    height: 100%;\n    top: -1px;\n    left: 0;\n    background-color: ${theme('theme', {\n      light: light.widgetBg,\n      dark: light.text\n    })};\n    box-shadow: 0 1px 8px rgba(65, 77, 85, 0.4);\n    z-index: 1;\n    opacity: 0;\n    transition: opacity var(--transition);\n    border-bottom: 2px ${props => colors[props.color]} solid;\n  }\n\n  .dots {\n    color: ${theme('theme', {\n      light: light.text,\n      dark: dark.text\n    })};\n    opacity: 0;\n    transition: opacity var(--transition);\n  }\n\n  &:hover {\n    &:after,\n    ${Label} .text,\n    .dots {\n      opacity: 1;\n    }\n\n    .checkbox label {\n      background-color: ${theme('theme', {\n        dark: dark.highlight\n      })};\n    }\n  }\n`\n\nexport const Content = styled.div`\n  position: relative;\n  z-index: 2;\n  display: flex;\n  gap: 12px;\n`\n\nexport const Main = styled.div`\n  ${flex.col};\n  gap: 10px;\n  flex-grow: 1;\n`\n\nexport const Secondary = styled.div`\n  ${flex.col};\n  justify-content: flex-end;\n  align-items: flex-end;\n`\n\n","import styled from 'styled-components/macro';\nimport theme from 'styled-theming';\nimport {dark, light, flex} from '@styles/vars';\n\nexport const PlannerItemContainer = styled.div`\n  background-color: ${theme('theme', {\n    light: light.bodyBg,\n    dark: dark.highlight\n  })};\n  padding: 20px 20px 20px 24px;\n  border-radius: 8px;\n  margin-bottom: 20px;\n  display: flex;\n  ${flex.between};\n  transition: background-color var(--transition);\n  cursor: grab;\n\n  * {\n    user-select: none;\n  }\n`;\n\nexport const Wrapper = styled.div`\n  ${flex.col};\n  gap: 6px;\n`;\n\nexport const TimestampWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n`;","// styling\nimport styled from 'styled-components/macro';\nimport theme from 'styled-theming';\nimport {colors, light, flex} from '@styles/vars'\n\n// utils\nimport PropTypes from 'prop-types';\n\nconst Square = styled.div`\n  input {\n    display: none;\n\n    &:checked + label span {\n      opacity: 1;\n    }\n  }\n\n  label {\n    ${flex.col};\n    ${flex.center};\n    width: 20px;\n    height: 20px;\n    border-radius: 4px;\n    background-color: ${theme('theme', {\n      light: colors.light_gray,\n      dark: light.text\n    })};\n    cursor: pointer;\n    transition: var(--transition);\n    position: relative;\n\n    span {\n      display: block;\n      border-radius: 2px;\n      background-color: ${colors.blue};\n      width: 12px;\n      height: 12px;\n      transition: opacity var(--transition);\n      opacity: 0;\n    }\n  }\n`\n\nconst Basic = styled.div`\n  input {\n    display: none;\n    &:checked + label {\n      color: ${colors.blue};\n    }\n  }\n\n  label {\n    color: #BBCDD9;\n    transition: var(--transition);\n\n    &:hover, &:focus {\n      color: ${colors.blue};\n    }\n  }\n`;\n\nconst Checkbox = ({variant, handler, checked, id}) => {\n    const commonProps = {\n        type: 'checkbox',\n        id,\n        defaultChecked: checked,\n        onChange: handler\n    }\n\n    const Layout = () => {\n        switch (variant) {\n            default:\n            case 'square':\n                return (\n                    <Square className=\"checkbox\">\n                        <input {...commonProps} />\n                        <label htmlFor={id} tabIndex={0}>\n                            <span></span>\n                        </label>\n                    </Square>\n                )\n            case 'basic':\n                return (\n                    <Basic>\n                        <input {...commonProps} />\n                        <label htmlFor={id} tabIndex={0}>\n                            <i className=\"icon icon-check\"/>\n                        </label>\n                    </Basic>\n                )\n        }\n    }\n\n    return <Layout/>\n}\n\nCheckbox.propTypes = {\n    variant: PropTypes.oneOf(['square', 'basic']).isRequired,\n    handler: PropTypes.func,\n    checked: PropTypes.bool,\n    id: PropTypes.string\n}\n\nexport default Checkbox;","// styled components\nimport {BasicBadge} from '@ui/Badge/style';\nimport {ListItemContainer, Content, Main, Label, Secondary} from './list';\nimport {PlannerItemContainer, Wrapper, TimestampWrapper} from '@components/Todos/Todo/planner';\n\n// components\nimport Timestamp from '@ui/Timestamp';\nimport Checkbox from '@ui/Checkbox';\nimport Collapse from '@mui/material/Collapse';\nimport {Badge} from '@ui/Badge/style';\n\n// utils\nimport {toggleComplete} from '@store/features/todos';\nimport {tasksColors} from '@constants/colors';\nimport moment from 'moment';\n\n// hooks\nimport {useDispatch} from 'react-redux';\n\nconst Todo = ({data, variant}) => {\n    const {id, name, timestamp, complete, label, expanded} = data;\n    const dispatch = useDispatch();\n    const color = tasksColors.find(({cat}) => cat === label).color;\n\n    const TodoLayout = () => {\n        switch (variant) {\n            default:\n            case 'list':\n                return (\n                    <ListItemContainer color={color} className=\"list-item\" tabIndex={0}>\n                        <Content>\n                            <Checkbox variant=\"square\" id={`task-${id}`} checked={complete}\n                                      handler={() => dispatch(toggleComplete({id}))}/>\n                            <Main>\n                                <input type=\"text\" defaultValue={name} readOnly={true} />\n                            </Main>\n                           \n                        </Content>\n                        \n                    </ListItemContainer>\n                    \n                )\n            case 'planner':\n                return (\n                    <PlannerItemContainer className=\"list-item\" tabIndex={0}>\n                        <Wrapper>\n                            <span>{name}</span>\n                            <TimestampWrapper>\n                                <Badge color={color}/>\n                                <Timestamp date={moment(timestamp).toDate()} time={true}/>\n                            </TimestampWrapper>\n                        </Wrapper>\n                        <Checkbox variant=\"basic\" id={`task-${id}`} checked={complete}\n                                  handler={() => dispatch(toggleComplete({id}))}/>\n                    </PlannerItemContainer>\n                )\n        }\n    }\n\n    return (\n        <Collapse in={expanded} timeout={300}>\n            <TodoLayout/>\n        </Collapse>\n    )\n}\n\nexport default Todo;","// styled components\nimport {DraggableListItem, DraggablePlannerItem} from './style';\n\n// components\nimport Todo from '@components/Todos/Todo';\nimport {\n    DndContext,\n    closestCenter,\n    TouchSensor,\n    PointerSensor,\n    useSensor,\n    useSensors,\n} from '@dnd-kit/core';\nimport {\n    arrayMove,\n    SortableContext,\n    verticalListSortingStrategy,\n    useSortable\n} from '@dnd-kit/sortable';\nimport {CSS} from '@dnd-kit/utilities';\nimport {restrictToVerticalAxis} from '@dnd-kit/modifiers';\n\n// hooks\nimport {useDispatch, useSelector} from 'react-redux';\nimport useMobileDetect from 'use-mobile-detect-hook';\n\n// utils\nimport propTypes from 'prop-types';\nimport {updateOrder} from '@store/features/todos';\n\nconst DnDLayout = ({variant}) => {\n    const device = useMobileDetect();\n    const todos = useSelector(state => state['todos'].todos);\n    const dispatch = useDispatch();\n    const DnDItem = variant === 'list' ? DraggableListItem : DraggablePlannerItem;\n    const sensors = useSensors(useSensor(PointerSensor, {\n        activationConstraint: {\n            distance: 15,\n        }\n    }), useSensor(TouchSensor, {\n        activationConstraint: {\n            delay: 2000,\n            tolerance: 5,\n        },\n    }));\n\n    const SortableItem = (props) => {\n        const {\n            attributes,\n            listeners,\n            setNodeRef,\n            transform,\n            transition,\n            isOver,\n            isDragging,\n        } = useSortable({id: props.id});\n\n        const style = {\n            transform: CSS.Transform.toString(transform),\n            transition,\n            zIndex: isOver || isDragging ? 10 : 0,\n            position: 'relative',\n            touchAction: 'none',\n        };\n\n        return (\n            <div ref={setNodeRef} style={style} {...attributes} {...listeners}>\n                {props.children}\n            </div>\n        );\n    }\n\n    const onDragEnd = e => {\n        const {active, over} = e;\n\n        if (active.id !== over.id) {\n            const oldIndex = todos.findIndex(({id}) => id === active.id);\n            const newIndex = todos.findIndex(({id}) => id === over.id);\n            dispatch(updateOrder(arrayMove(todos, oldIndex, newIndex)));\n        }\n    }\n\n    return (\n        <DndContext sensors={sensors} collisionDetection={closestCenter} onDragEnd={onDragEnd}\n                    modifiers={[restrictToVerticalAxis]} autoScroll={true}>\n            <SortableContext items={todos} strategy={verticalListSortingStrategy} disabled={!device.isDesktop()}>\n                {todos.map(todo => (\n                    <SortableItem key={todo.id} id={todo.id}>\n                        <DnDItem>\n                            <Todo data={todo} variant={variant}/>\n                        </DnDItem>\n                    </SortableItem>\n                ))}\n            </SortableContext>\n        </DndContext>\n    )\n}\n\nDnDLayout.propTypes = {\n    variant: propTypes.oneOf(['planner', 'list']).isRequired\n}\n\nexport default DnDLayout;","import {tasksColors} from '@constants/colors';\nimport LegendItem from '@ui/Legend/LegendItem';\nimport Legend from '@ui/Legend';\n\nexport default function TodosLegend() {\n    return (\n        <Legend>\n            {tasksColors.map(({color, cat}) => <LegendItem key={cat} color={color} legend={cat} />)}\n        </Legend>\n    )\n}","// styling\nimport styled from 'styled-components/macro';\n// styled components\nimport { Form, BtnWrapper, InputWrapper } from '../../components/Todos/AddForm/style';\nimport DatePicker from \"react-datepicker\";\n\nimport \"react-datepicker/dist/react-datepicker.css\";\n// components\nimport CustomSelect from '@ui/Select';\nimport Field from '@ui/Field';\nimport Grow from '@mui/material/Grow';\nimport Collapse from '@mui/material/Collapse';\n// utils\n\nimport { useDispatch } from 'react-redux';\nimport { addTodo, toggleCollapse } from '@store/features/todos';\nimport { tasksOptions } from '@constants/options';\nimport { useState } from 'react';\nimport { nanoid } from 'nanoid';\n// components\nimport Widget from '@components/Widget';\nimport WidgetHeader from '@components/Widget/WidgetHeader';\nimport { Navbar } from '@components/Widget/style';\nimport Btn from '@ui/Btn'\nimport { useSnackbar } from 'notistack';\nimport TodosLegend from '@components/Todos/TodosLegend';\nimport AddForm from '@components/Todos/AddForm';\nimport DnDLayout from '@components/Todos/DnDLayout';\nimport ScrollContainer from '@components/ScrollContainer';\n// hooks\nimport { useSelector } from 'react-redux';\nimport { useRef, useEffect } from 'react';\nimport useContentHeight from '@hooks/useContentHeight';\nimport { InputLabel, TextField, FormControl, MenuItem, Paper, Typography, Select } from '@mui/material';\nimport { BookAppointment, GetAllUSers, GetEmployess, GetLocation, GetPatientAppointment, GetTypeAppointment } from '@components/Api/AllApi';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport Cookies from 'js-cookie';\nimport Url from 'url/Allurl';\nconst Footer = styled.div`\n  padding: 2px 24px 22px 24px;\n`;\n\nconst TasksList = () => {\n    const { enqueueSnackbar } = useSnackbar();\n    const [open, setOpen] = useState(false);\n    const [filteredOptions, setFilteredOptions] = useState([]);\n    const [selectedPatientId, setSelectedPatientId] = useState(null);\n    const [patientName, setPatientName] = useState('');\n    const [employeeId, setEmployeeId] = useState('');\n    const [clinicLocation, setClinicLocation] = useState('');\n    const [type, setType] = useState('');\n    const [startDate, setStartDate] = useState(new Date());\n    const [endDate, setEndDate] = useState(new Date());\n    const [note, setNote] = useState('');\n    const [appointmentColor, setAppointmentColor] = useState('');\n    const todos = useSelector(state => state['todos'].todos);\n    const [isFormVisible, setFormVisible] = useState(false);\n    const [optionsData, setOptions] = useState([]);\n\n    const [ttt, setTTT] = useState(false)\n    const [GetLoc, setGetLoc] = useState(false)\n    const [GetEmpl, setGetEmp] = useState(false)\n    const headerRef = useRef(null);\n    const footerRef = useRef(null);\n    const listRef = useRef(null);\n    const height = useContentHeight(headerRef, footerRef);\n    const dataFromLocalStorage = localStorage.getItem(\"clinic\");\n\n    // Parse the JSON data back to an object\n    const parsedData = JSON.parse(dataFromLocalStorage);\n\n    // Now, \"parsedData\" will contain the full object with all the properties that were originally present in the `data` object\n    console.log(parsedData, \"AL Data AAAAAAAAAAAAAAAAAAAAA\");\n\n    const ValueID = parsedData.id;\n    const ClinicID = parsedData.clinic_id;\n\n\n    const [task, setTask] = useState('');\n    const [category, setCategory] = useState(null);\n    const dispatch = useDispatch();\n    const timestamp = Date.now();\n\n    const handleTaskChange = (e) => {\n        setTask(e.target.value);\n    }\n\n    const handleCategoryChange = e => {\n        setCategory(e);\n    }\n\n    const resetForm = () => {\n        setTask('');\n        setCategory(null);\n    }\n\n\n\n    const handleSubmit = (event) => {\n        let token = Cookies.get(\"clinic\");\n        console.log(token, \"This Is token for all Api's\");\n        event.preventDefault();\n        var myHeaders = new Headers();\n        myHeaders.append(\"Accept\", \"application/json\");\n        myHeaders.append(\"Authorization\", `Bearer ${token}`);\n\n        var formdata = new FormData();\n        console.log(selectedPatientId, \"SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS\")\n        formdata.append(\"patient_id\", selectedPatientId);\n        formdata.append(\"doctor_id\", employeeId);\n        formdata.append(\"clinic_id\", ClinicID);\n        formdata.append(\"clinic_location_id\", clinicLocation);\n        formdata.append(\"type_id\", type);\n        formdata.append(\"start_date\", startDate);\n        formdata.append(\"end_date\", endDate);\n        formdata.append(\"note\", note);\n        formdata.append(\"appointment_color\", appointmentColor);\n\n        var requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n            body: formdata,\n            redirect: 'follow'\n        };\n\n        return fetch(`${Url}/api/clinic_appointment`, requestOptions)\n            .then((res) => res.json())\n            .then((json) => {\n                console.log(json, \"anjkhgdchjm\");\n                // alert()\n                enqueueSnackbar(json.messege, {\n                    variant: 'success',\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                });\n                window.location.reload()\n            })\n            .catch((e) => console.log(e));\n\n    };\n\n\n\n\n\n\n\n\n    useEffect(() => {\n        GetAllTypeAppointmentData();\n        getPatientData();\n        GetLoca();\n        GetEmp();\n    }, [patientName]);\n\n\n    const getPatientData = async () => {\n        if (patientName) {\n            try {\n                // Get the clinic ID from where it's available, or define it properly\n                const Filerpatient = await GetPatientAppointment(patientName);\n                console.log(Filerpatient, \"IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIii\");\n\n                if (Filerpatient) {\n                    // Here, we check if Filerpatient is an object with a \"then\" function (i.e., a Promise).\n                    if (typeof Filerpatient.then === 'function') {\n                        // If it's a Promise, we use \"await\" to get the resolved data.\n                        const data = await Filerpatient;\n                        console.log(data.results, \"AAAAAAAAAAAAAA\");\n                        setFilteredOptions(data.results)\n                    } else {\n                        console.log(Filerpatient.results?.[0]?.name, \"AAAAAAAAAAAAAA\");\n                        setFilteredOptions(Filerpatient.results)\n                        console.log(Filerpatient.results, \"UUUUUUUUUUUUUUUuu\")\n                    }\n                }\n            } catch (error) {\n                console.error('Error fetching patient data:', error);\n                setOptions([]);\n            }\n        } else {\n            setOptions([]);\n        }\n    };\n    const GetAllTypeAppointmentData = () => {\n        let TyoeData = GetTypeAppointment()\n        if (TyoeData) {\n            TyoeData.then((data) => {\n                console.log(data.result)\n                setTTT(data.result)\n            })\n        }\n    }\n\n\n    const handleChange = (event) => {\n        setPatientName(event.target.value);\n    };\n\n    const handleInputFocus = () => {\n        setOpen(true);\n    };\n\n    const handleInputBlur = () => {\n        setOpen(false);\n    };\n\n    const [selectedDate, setSelectedDate] = useState(null);\n\n    const handleDateChange = (date) => {\n        setSelectedDate(date);\n    };\n\n\n\n    const GetLoca = () => {\n        let TyoeData = GetLocation()\n        if (TyoeData) {\n            TyoeData.then((data) => {\n                console.log(data.result)\n                setGetLoc(data.result)\n            })\n        }\n    }\n\n    const GetEmp = () => {\n        let TyoeData = GetAllUSers()\n        if (TyoeData) {\n            TyoeData.then((data) => {\n                console.log(data.result)\n                setGetEmp(data.result)\n            })\n        }\n    }\n\n\n\n    return (\n        <Widget name=\"TasksList\" mobile={600}>\n\n\n            <Form onSubmit={handleSubmit} >\n                <InputLabel sx={{ margin: 1 }}>Patient search</InputLabel>\n\n                <Autocomplete\n                    size=\"small\"\n                    required\n                    options={filteredOptions}\n                    getOptionLabel={(option) => option.name}\n                    sx={{ width: 300 }}\n\n                    renderInput={(params) => <TextField {...params} />}\n                    onInputChange={(event, newValue) => setPatientName(newValue)}\n                    onChange={(event, newValue) => {\n                        if (newValue) {\n                            setSelectedPatientId(newValue.id); // Update selectedPatientId with the ID of the selected option\n                            getPatientData(newValue.id); // Call getPatientData with the selected option's ID\n                        } else {\n                            setSelectedPatientId(null); // Clear selectedPatientId if no option is selected\n                        }\n                    }}\n                />\n\n\n                <InputLabel sx={{ margin: 1 }}>Select Employee</InputLabel>\n                <Select\n                    labelId=\"dropdown-label\"\n                    fullWidth\n                    size='small'\n                    required\n                    value={employeeId} onChange={(e) => setEmployeeId(e.target.value)}\n                >\n                    {\n                        GetEmpl && GetEmpl?.map((data) => {\n                            return (\n                                <MenuItem value={data.id}>{data.name}</MenuItem>\n                            )\n                        })\n                    }\n\n\n                </Select>\n\n                <InputLabel sx={{ margin: 1 }}>Clinic location</InputLabel>\n                <Select\n                    labelId=\"dropdown-label\"\n                    fullWidth\n                    size='small'\n                    required\n                    value={clinicLocation}\n                    onChange={(e) => setClinicLocation(e.target.value)}\n                >\n                    {\n                        GetLoc && GetLoc?.map((data) => {\n                            return (\n\n                                <MenuItem value={data.id}>{data.city}</MenuItem>\n                            )\n                        })\n                    }\n                </Select>\n\n                <InputLabel sx={{ margin: 1 }}>Type</InputLabel>\n                <Select\n                    labelId=\"dropdown-label\"\n                    fullWidth\n                    size='small'\n                    value={type}\n                    required\n                    onChange={(e) => setType(e.target.value)}\n                >\n                    {\n                        ttt && ttt?.map((data) => {\n                            return (\n\n                                <MenuItem value={data.id}>{data.name}{data.length}</MenuItem>\n                            )\n                        })\n                    }\n\n                </Select>\n\n                <InputLabel sx={{ margin: 1 }}>Appointment Date/Time</InputLabel>\n                <TextField\n                    // onChange={handleDateChange}\n                    value={startDate}\n                    required\n                    onChange={(e) => {\n                        const inputDate = e.target.value;\n                        setStartDate(inputDate);\n                    }}\n                    type=\"datetime-local\"\n\n                    placeholder=\"Select Start Date\"\n                    fullWidth size=\"small\"\n                />\n\n                <InputLabel sx={{ margin: 1 }}>Appointment End Date/Time</InputLabel>\n                <TextField\n                    required\n                    value={endDate}\n                    onChange={(e) => {\n                        const inputDate = e.target.value;\n                        setEndDate(inputDate)\n                    }}\n                    type=\"datetime-local\"\n\n                    placeholder=\"Select End Date\"\n                    fullWidth size=\"small\"\n                />\n\n                <InputLabel sx={{ margin: 1 }}>Notes</InputLabel>\n                <TextField size=\"small\" value={note} onChange={(e) => setNote(e.target.value)} fullWidth required />\n\n                <InputLabel sx={{ margin: 1 }}>Appointment Color</InputLabel>\n                <TextField\n                    size=\"small\"\n                    value={appointmentColor}\n                    onChange={(e) => setAppointmentColor(e.target.value)}\n                    fullWidth\n                    required\n\n                    // You can add the \"type\" attribute with a value of \"color\" to provide a color picker input.\n                    type=\"color\"\n\n                    // You can set a placeholder to provide a hint to users about the expected format or color value.\n                    placeholder=\"#RRGGBB\"  // Replace with the format you prefer.\n                />\n\n\n\n                <button style={{ width: '100%', height: 40, marginTop: 15, backgroundColor: 'green', color: 'white', borderRadius: 4 }}>Create Appointment</button>\n\n            </Form>\n        </Widget>\n    )\n}\n\nexport default TasksList;","import React, { useState } from 'react';\r\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\r\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\r\nimport moment from 'moment';\r\nimport List from '@mui/material/List';\r\nimport { Box, Container, InputLabel, ListItemText, Stack, Typography, TextField } from '@mui/material';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport { useEffect } from 'react';\r\nimport { AllAppointmentDetails, GetAllUSers, GetLocation, GetSingleAppp, GetTypeAppointment } from '@components/Api/AllApi';\r\nimport './style.css'\r\nimport DoctorPopup from '@components/AppointmentsCalendar/DoctorPopup';\r\nimport Url from 'url/Allurl';\r\nimport { useSnackbar } from 'notistack';\r\nimport Cookies from 'js-cookie';\r\n\r\n\r\nconst localizer = momentLocalizer(moment);\r\n\r\nexport default function MYCalendar() {\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n    const [hh, sethh] = useState(false)\r\n    const [hhA, sethhA] = useState(false)\r\n    const [hhB, sethhB] = useState(false)\r\n    const [count, setCount] = useState(0)\r\n    const [ttt, setTTT] = useState(false)\r\n    const [events, setEvents] = useState([]);\r\n    const [post, setPost] = useState([]);\r\n    const [view, setView] = useState('month'); // Default view is 'month'\r\n    const [selectedEvent, setSelectedEvent] = useState(null);\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const handleViewChange = (newView) => {\r\n        setView(newView);\r\n    };\r\n\r\n    const handleSelectEvent = (event) => {\r\n        setSelectedEvent(event);\r\n    };\r\n\r\n    useEffect(() => {\r\n        GetAllTypeAppointmentData();\r\n        GetAllLocationtData()\r\n        GetAllUserData()\r\n    }, [count]);\r\n\r\n\r\n\r\n    const GetAllTypeAppointmentData = () => {\r\n        let TyoeData = GetTypeAppointment()\r\n        if (TyoeData) {\r\n            TyoeData.then((data) => {\r\n                console.log(data.result)\r\n                setTTT(data.result)\r\n            })\r\n        }\r\n    }\r\n    const GetAllLocationtData = () => {\r\n        let TyoeData = GetLocation()\r\n        if (TyoeData) {\r\n            TyoeData.then((data) => {\r\n                console.log(data.result, \"00000000000000000000000000000000000000000000000\")\r\n                sethhA(data.result)\r\n            })\r\n        }\r\n    }\r\n\r\n    const GetAllUserData = () => {\r\n        let TyoeData = GetAllUSers()\r\n        if (TyoeData) {\r\n            TyoeData.then((data) => {\r\n                console.log(data.result, \"!@#$%^&*()_\")\r\n                sethhB(data.result)\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const data = await AllAppointmentDetails();\r\n                const formattedEvents = data?.result.map((event) => ({\r\n                    id: event.id,\r\n                    title: event?.patient?.[0].name,\r\n                    start: new Date(event.start_date),\r\n                    end: new Date(event.end_date),\r\n                }));\r\n                setEvents(formattedEvents);\r\n            } catch (error) {\r\n                console.error(\"Error fetching data:\", error);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, [count]);\r\n\r\n\r\n\r\n\r\n\r\n    const closePopup = () => {\r\n        setSelectedEvent(null);\r\n    };\r\n\r\n\r\n\r\n    const { type_id, note, status, start_date, end_date, id, appointment_color, doctor_id, clinic_location_id } = hh;\r\n\r\n\r\n    const editpopup = (eventId) => {\r\n        setSelectedEvent(eventId);\r\n        setIsModalOpen(true);\r\n        GetSingleAppp(eventId)\r\n            .then((data) => {\r\n                // Handle the fetched data here, e.g., set it to a state variable\r\n                console.log(data?.result, \"Additional event data\");\r\n                sethh(data?.result)\r\n            })\r\n            .catch((error) => {\r\n                console.error(\"Error fetching additional event data:\", error);\r\n            });\r\n        // Set modal state to true to open the modal\r\n        closePopup()\r\n\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        let token = Cookies.get(\"clinic\");\r\n        console.log(token, \"This Is token for all Api's\");\r\n        e.preventDefault();\r\n        var myHeaders = new Headers();\r\n        myHeaders.append(\"Accept\", \"application/json\");\r\n        myHeaders.append(\"Authorization\", `Bearer ${token}`);\r\n\r\n        var formdata = new FormData();\r\n        formdata.append(\"id\", id);\r\n        formdata.append(\"type_id\", type_id);\r\n        formdata.append(\"start_date\", start_date);\r\n        formdata.append(\"end_date\", end_date);\r\n        formdata.append(\"note\", note);\r\n        formdata.append(\"appointment_color\", appointment_color);\r\n        formdata.append(\"status\", status);\r\n        formdata.append(\"clinic_location_id\", clinic_location_id);\r\n        formdata.append(\"doctor_id\", doctor_id);\r\n\r\n        var requestOptions = {\r\n            method: 'POST',\r\n            headers: myHeaders,\r\n            body: formdata,\r\n            redirect: 'follow'\r\n        };\r\n\r\n        return fetch(`${Url}/api/update_appointment_inclinic`, requestOptions)\r\n            .then((res) => res.json())\r\n            .then((json) => {\r\n                console.log(json, \"anjkhgdchjm\");\r\n                enqueueSnackbar(json.messege, {\r\n                    variant: 'success',\r\n                    anchorOrigin: {\r\n                        vertical: 'top',\r\n                        horizontal: 'right',\r\n                    },\r\n                });\r\n                setCount(count + 1)\r\n                closePopup()\r\n            })\r\n            .catch((e) =>\r\n            enqueueSnackbar(e, \"error to Make Appointment!\", {\r\n                variant: 'error',\r\n                anchorOrigin: {\r\n                    vertical: 'top',\r\n                    horizontal: 'right',\r\n                },\r\n            })\r\n            )\r\n\r\n    };\r\n    const closeModal = () => {\r\n        setIsModalOpen(false);\r\n    };\r\n    return (\r\n        <div className=\"custom_cal\">\r\n            <div>\r\n                <button onClick={() => handleViewChange('month')}>Month</button>\r\n                <button onClick={() => handleViewChange('week')}>Week</button>\r\n                <button onClick={() => handleViewChange('day')}>Day</button>\r\n            </div>\r\n            <Calendar\r\n                localizer={localizer}\r\n                events={events}\r\n                startAccessor=\"start\"\r\n                endAccessor=\"end\"\r\n                style={{ height: '500px' }}\r\n                views={['month', 'week', 'day']}\r\n                defaultView={view}\r\n                onSelectEvent={handleSelectEvent}\r\n            />\r\n\r\n            {selectedEvent && (\r\n                <div className=\"event-popup\" style={{ position: 'absolute', top: '40%', left: '50%', padding: 20, borderRadius: 7, background: 'white', zIndex: 9999, height: 200, overflow: 'scroll' }}>\r\n                    <Stack direction=\"row\" sx={{ justifyContent: \"end\" }}>\r\n                        <Box>\r\n                            <button style={{ backgroundColor: 'red', padding: 6, justifyContent: 'end', color: \"white\", borderRadius: 7 }} onClick={closePopup}>X</button>\r\n\r\n                        </Box>\r\n                    </Stack>\r\n\r\n                    {events\r\n                        .filter((appointment) =>\r\n                            moment(appointment.start).isSame(selectedEvent.start, 'day') &&\r\n                            moment(appointment.start).isSame(selectedEvent.start, 'hour') &&\r\n                            moment(appointment.start).isSame(selectedEvent.start, 'minute')\r\n                        )\r\n                        .map((appointment) => (\r\n                            <List key={appointment.id}>\r\n                                <Stack direction=\"row\">\r\n\r\n                                    <Box>\r\n\r\n\r\n                                        <ListItemText primary={`Start Date: ${moment(appointment.start).format('YYYY-MM-DD HH:mm')}`} />\r\n\r\n                                    </Box>\r\n                                    <Box>\r\n                                        <ListItemText primary={`End Date: ${moment(appointment.end).format('YYYY-MM-DD HH:mm')}`} />\r\n\r\n\r\n\r\n                                    </Box>\r\n                                    <Box>\r\n\r\n                                        <ListItemText primary={`Patient Name :${appointment.title}`} />\r\n\r\n\r\n                                    </Box>\r\n                                    <Box>\r\n                                        <EditIcon sx={{ color: \"green\", marginLeft: 4 }} onClick={() => editpopup(appointment.id)} />\r\n\r\n                                    </Box>\r\n                                </Stack>\r\n                            </List>\r\n                        ))}\r\n\r\n                </div>\r\n            )}\r\n            {isModalOpen && (\r\n                <>\r\n                    <Box sx={{ position: \"absolute\", top: '15%', backgroundColor: 'white', borderRadius: 3, padding: 1, zIndex: 999 }}>\r\n                        <Container >\r\n\r\n                            <form >\r\n                                <Typography>Patient Nagar</Typography>\r\n                                <InputLabel sx={{ margin: 1 }}>Select Status</InputLabel>\r\n                                <select\r\n                                    style={{ width: '100%', padding: 10 }}\r\n                                    value={status}\r\n                                    onChange={(e) => {\r\n                                        sethh({\r\n                                            ...hh,\r\n                                            status: e.target.value\r\n                                        });\r\n                                    }}\r\n                                    labelId=\"dropdown-label\"\r\n                                    fullWidth\r\n                                    size='small'\r\n                                    required\r\n                                >\r\n                                    <option value=\"pending\">pending</option>\r\n                                    <option value=\"seen\">seen</option>\r\n                                    <option value=\"cancel\">cancel</option>\r\n                                    <option value=\"not-show\">not-show</option>\r\n                                </select>\r\n                                <InputLabel sx={{ margin: 1 }}>Type</InputLabel>\r\n\r\n                                <select\r\n                                    style={{ width: '100%', padding: 10 }}\r\n                                    labelId=\"dropdown-label\"\r\n                                    fullWidth\r\n                                    value={type_id}\r\n                                    onChange={(e) => {\r\n                                        sethh({\r\n                                            ...hh,\r\n                                            type_id: e.target.value\r\n                                        });\r\n                                    }}\r\n                                    size='small'\r\n                                    required\r\n                                >\r\n\r\n                                    {\r\n                                        ttt && ttt?.map((data) => {\r\n                                            return (\r\n\r\n                                                <option value={data.id}>{data.name}{data.length}</option>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </select>\r\n                                <InputLabel sx={{ margin: 1 }}>Clinic Location</InputLabel>\r\n\r\n                                <select\r\n                                    style={{ width: '100%', padding: 10 }}\r\n                                    labelId=\"dropdown-label\"\r\n                                    fullWidth\r\n                                    value={clinic_location_id}\r\n                                    onChange={(e) => {\r\n                                        sethhA({\r\n                                            ...hhA,\r\n                                            clinic_location_id: e.target.value\r\n                                        });\r\n                                    }}\r\n                                    size='small'\r\n                                    required\r\n                                >\r\n\r\n                                    {\r\n                                        hhA && hhA?.map((data) => {\r\n                                            return (\r\n\r\n                                                <option value={data.id}>{data.name}{data.length}</option>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </select>\r\n                                <InputLabel sx={{ margin: 1 }}>Clinic Doctors</InputLabel>\r\n\r\n                                <select\r\n                                    style={{ width: '100%', padding: 10 }}\r\n                                    labelId=\"dropdown-label\"\r\n                                    fullWidth\r\n                                    value={doctor_id}\r\n                                    onChange={(e) => {\r\n                                        sethhA({\r\n                                            ...hhA,\r\n                                            doctor_id: e.target.value\r\n                                        });\r\n                                    }}\r\n                                    size='small'\r\n                                    required\r\n                                >\r\n\r\n                                    {\r\n                                        hhB && hhB?.map((data) => {\r\n                                            return (\r\n\r\n                                                <option value={data.id}>{data.name}{data.length}</option>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </select>\r\n\r\n                                <InputLabel sx={{ margin: 1 }}>Appointment Date/Time</InputLabel>\r\n                                <TextField\r\n                                    required\r\n                                    value={start_date}\r\n                                    onChange={(e) => {\r\n                                        sethh({\r\n                                            ...hh,\r\n                                            start_date: e.target.value\r\n                                        });\r\n                                    }}\r\n                                    type=\"datetime-local\"\r\n                                    placeholder=\"Select Start Date\"\r\n                                    fullWidth\r\n                                    size=\"small\"\r\n                                />\r\n\r\n                                <InputLabel sx={{ margin: 1 }}>Appointment End Date/Time</InputLabel>\r\n                                <TextField\r\n                                    required\r\n                                    value={end_date}\r\n                                    onChange={(e) => {\r\n                                        sethh({\r\n                                            ...hh,\r\n                                            end_date: e.target.value\r\n                                        });\r\n                                    }}\r\n                                    type=\"datetime-local\"\r\n                                    placeholder=\"Select End Date\"\r\n                                    fullWidth\r\n                                    size=\"small\"\r\n                                />\r\n\r\n                                <InputLabel sx={{ margin: 1 }}>Notes</InputLabel>\r\n                                <TextField\r\n                                    size=\"small\"\r\n                                    fullWidth\r\n                                    value={note}\r\n                                    required\r\n                                    onChange={(e) => {\r\n                                        sethh({\r\n                                            ...hh,\r\n                                            note: e.target.value\r\n                                        });\r\n                                    }}\r\n                                />\r\n\r\n                                <InputLabel sx={{ margin: 1 }}>Appointment Color</InputLabel>\r\n                                <TextField\r\n                                    size=\"small\"\r\n                                    fullWidth\r\n                                    required\r\n                                    value={appointment_color}\r\n                                    onChange={(e) => {\r\n                                        sethh({\r\n                                            ...hh,\r\n                                            appointment_color: e.target.value\r\n                                        });\r\n                                    }}\r\n                                    type=\"color\"\r\n                                    placeholder=\"#RRGGBB\"\r\n                                />\r\n\r\n                                <Stack direction='row' sx={{ justifyContent: 'space-between', gap: 5, marginTop: '20px' }} gap={4} mt={2}>\r\n                                    <button\r\n                                        style={{ backgroundColor: 'red', padding: 10, color: 'white', borderRadius: 3 }}\r\n                                        onClick={() => setIsModalOpen(false)}\r\n                                    >\r\n                                        Cancel\r\n                                    </button>\r\n\r\n                                    <button style={{ marginLeft: '20px', backgroundColor: 'green', padding: 10, color: 'white', borderRadius: 3 }} type='submit' onClick={handleSubmit}>Save Change</button>\r\n                                </Stack>\r\n                            </form>\r\n\r\n\r\n                        </Container>\r\n                    </Box>\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n","// components\nimport Page from '@layout/Page';\nimport TasksList from '@widgets/TasksList';\nimport ConfirmedDiagnoses from '@widgets/ConfirmedDiagnoses';\nimport DiagnosesDonut from '@widgets/DiagnosesDonut';\nimport RadarAreaChart from '@widgets/RadarAreaChart';\nimport PatientCalendar from '@widgets/PatientCalendar';\n// utils\nimport { useState } from 'react';\nimport { Box } from '@mui/material';\nimport Sidebar from '@layout/Sidebar';\nimport Panel from '@layout/Panel';\nimport MYCalendar from '@components/CustomAppointment.js/Calender';\n\n\n\n\n\nconst DashboardC = () => {\n    const [currentView, setView] = useState('day');\n\n    let pageTitle = '';\n    switch (currentView) {\n        case 'week':\n            pageTitle = 'Available Appointments Time';\n            break;\n        case 'month':\n            pageTitle = 'Appointments Schedule';\n            break;\n        default:\n            pageTitle = 'Your appointments';\n            break;\n    }\n    return (\n\n        <>\n            <Sidebar />\n            <Panel />\n            <Box title=\"Appointments\"  sx={{\n                    margin: 3,\n                    marginTop: '3%',\n                    display: 'flex',\n                    flexWrap: 'wrap',  // Allow items to wrap to the next line\n                    gap: 5,\n                    marginBottom:'5%'\n                    // marginRight: 10\n                }}>\n                <div key=\"task-list\" style={{ flex: '0.2' }}>\n                    <TasksList />\n                </div>\n                <div key=\"calendar\" style={{ flex: '1' }}>\n                    <MYCalendar current={currentView} handler={setView} />\n                </div>\n\n\n            </Box>\n        </>\n\n\n    )\n}\n\nexport default DashboardC;","import styled from 'styled-components/macro';\nimport {flex, textSizes, fonts} from '@styles/vars';\n\nexport const List = styled.ul`\n  gap: 22px;\n  margin-top: 20px;\n  ${flex.col}\n`\n\nexport const Block = styled.div`\n  display: flex;\n  ${flex.between}\n  margin-bottom: 7px;\n  font-size: ${textSizes['14']};\n`\n\nexport const Text = styled.div`\n  display: flex;\n  gap: 4px;\n  font-family: ${fonts.accent};\n  \n  .num {\n    font-weight: 500;\n  }\n  & + .label {\n    text-transform: capitalize;\n  }\n`","// components\nimport Widget from '@components/Widget';\nimport AppointmentsCalendar from '@components/AppointmentsCalendar';\n\nconst PatientCalendar = ({handler, current}) => {\n    return (\n        <Widget name=\"PatientCalendar\">\n            <AppointmentsCalendar current={current} viewChangeHandler={handler} type=\"patient\"/>\n        </Widget>\n    )\n}\n\nexport default PatientCalendar;","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"\n}), 'Edit');\nexports.default = _default;"],"names":["_ref","current","handler","periods","usePeriodNav","_jsx","Container","children","map","p","Item","Button","className","onClick","nanoid","isVisible","visibilityHandler","variant","_useState","useState","_useState2","_slicedToArray","task","setTask","_useState3","_useState4","category","setCategory","dispatch","useDispatch","timestamp","Date","now","resetForm","Collapse","in","Grow","timeout","_jsxs","Form","onSubmit","e","preventDefault","id","addTodo","name","label","value","expanded","setTimeout","toggleCollapse","handleSubmit","InputWrapper","Field","placeholder","target","CustomSelect","options","tasksOptions","changeHandler","BtnWrapper","Btn","text","type","border","theme","light","concat","colors","light_gray","dark","styled","form","withConfig","componentId","flex","col","highlight","props","div","DraggableListItem","plannerFocused","bodyBg","DraggablePlannerItem","Label","span","textSizes","fonts","accent","breakpoints","mobileL","tablet","laptop","ListItemContainer","effects","dashedLight","dashedDark","widgetBg","color","Content","Main","PlannerItemContainer","between","Wrapper","TimestampWrapper","Square","center","blue","Basic","checked","commonProps","defaultChecked","onChange","Layout","_objectSpread","htmlFor","tabIndex","data","complete","tasksColors","find","_ref2","cat","TodoLayout","Checkbox","toggleComplete","defaultValue","readOnly","Badge","Timestamp","date","moment","toDate","time","device","useMobileDetect","todos","useSelector","state","DnDItem","sensors","useSensors","useSensor","PointerSensor","activationConstraint","distance","TouchSensor","delay","tolerance","SortableItem","_useSortable","useSortable","attributes","listeners","setNodeRef","transform","transition","isOver","isDragging","style","CSS","Transform","toString","zIndex","position","touchAction","ref","DndContext","collisionDetection","closestCenter","onDragEnd","active","over","oldIndex","findIndex","newIndex","_ref3","updateOrder","arrayMove","modifiers","restrictToVerticalAxis","autoScroll","SortableContext","items","strategy","verticalListSortingStrategy","disabled","isDesktop","todo","Todo","TodosLegend","Legend","LegendItem","legend","enqueueSnackbar","useSnackbar","filteredOptions","setFilteredOptions","_useState5","_useState6","selectedPatientId","setSelectedPatientId","_useState7","_useState8","patientName","setPatientName","_useState9","_useState10","employeeId","setEmployeeId","_useState11","_useState12","clinicLocation","setClinicLocation","_useState13","_useState14","setType","_useState15","_useState16","startDate","setStartDate","_useState17","_useState18","endDate","setEndDate","_useState19","_useState20","note","setNote","_useState21","_useState22","appointmentColor","setAppointmentColor","_useState23","_useState24","_useState25","_useState26","setOptions","_useState27","_useState28","ttt","setTTT","_useState29","_useState30","GetLoc","setGetLoc","_useState31","_useState32","GetEmpl","setGetEmp","headerRef","useRef","footerRef","dataFromLocalStorage","useContentHeight","localStorage","getItem","parsedData","JSON","parse","console","log","ClinicID","clinic_id","_useState33","_useState34","_useState35","_useState36","useEffect","GetAllTypeAppointmentData","getPatientData","GetLoca","GetEmp","_asyncToGenerator","_regeneratorRuntime","mark","_callee","Filerpatient","_Filerpatient$results","_Filerpatient$results2","wrap","_context","prev","next","GetPatientAppointment","sent","then","results","t0","error","stop","apply","arguments","TyoeData","GetTypeAppointment","result","_useState37","_useState38","GetLocation","GetAllUSers","Widget","mobile","event","token","Cookies","get","myHeaders","Headers","append","formdata","FormData","requestOptions","method","headers","body","redirect","fetch","Url","res","json","messege","anchorOrigin","vertical","horizontal","window","location","reload","catch","InputLabel","sx","margin","Autocomplete","size","required","getOptionLabel","option","width","renderInput","params","TextField","onInputChange","newValue","Select","labelId","fullWidth","MenuItem","city","length","inputDate","height","marginTop","backgroundColor","borderRadius","localizer","momentLocalizer","MYCalendar","hh","sethh","hhA","sethhA","hhB","sethhB","count","setCount","events","setEvents","view","setView","selectedEvent","setSelectedEvent","isModalOpen","setIsModalOpen","handleViewChange","newView","GetAllLocationtData","GetAllUserData","fetchData","formattedEvents","AllAppointmentDetails","_event$patient","title","patient","start","start_date","end","end_date","closePopup","type_id","status","appointment_color","doctor_id","clinic_location_id","Calendar","startAccessor","endAccessor","views","defaultView","onSelectEvent","top","left","padding","background","overflow","Stack","direction","justifyContent","Box","filter","appointment","isSame","List","ListItemText","primary","format","EditIcon","marginLeft","eventId","GetSingleAppp","_Fragment","Typography","gap","mt","currentView","Sidebar","Panel","display","flexWrap","marginBottom","TasksList","ul","AppointmentsCalendar","viewChangeHandler","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}